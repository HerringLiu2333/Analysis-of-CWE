/**
 * @name CVE-2025-38323
 * @description A race condition in the ATM LANE (LEC) subsystem allows concurrent access to the global `dev_lec` array without proper locking. An error handling path in the `lecd_attach` function frees a network device but fails to NULLify its corresponding pointer in the array, creating a dangling pointer. This can be subsequently accessed by another thread, leading to a use-after-free vulnerability.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/race-condition-use-after-free
 * @tags security
 *       correctness
 *       concurrency
 *       race-condition
 *       use-after-free
 *       external/cwe/cwe-362
 *       external/cwe/cwe-416
 *       external/cwe/cwe-667
 * @patch-commit d13a3824bfd2b4774b671a75cf766a16637a0e67
 * @source-file net/atm/lec.c
 * @affected-function lane_ioctl, lecd_attach
 * @kernel-config CONFIG_ATM_LANE
 * @vulnerability-type race-condition, use-after-free
 * @patch-diff |
 *     diff --git a/net/atm/lec.c b/net/atm/lec.c
 *     index acef984f336709..1e1f3eb0e2ba3c 100644
 *     --- a/net/atm/lec.c
 *     +++ b/net/atm/lec.c
 *     @@ -124,6 +124,7 @@ static unsigned char bus_mac[ETH_ALEN] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
 *      
 *      /* Device structures *&#47;
 *      static struct net_device *dev_lec[MAX_LEC_ITF];
 *     +static DEFINE_MUTEX(lec_mutex);
 *      
 *      #if IS_ENABLED(CONFIG_BRIDGE)
 *      static void lec_handle_bridge(struct sk_buff *skb, struct net_device *dev)
 *     @@ -742,6 +746,7 @@ static int lecd_attach(struct atm_vcc *vcc, int arg)
 *      		snprintf(dev_lec[i]->name, IFNAMSIZ, "lec%d", i);
 *      		if (register_netdev(dev_lec[i])) {
 *      			free_netdev(dev_lec[i]);
 *     +			dev_lec[i] = NULL;
 *      			return -EINVAL;
 *      		}
 *      
 *     @@ -1003,6 +1008,7 @@ static int lane_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 *      		return -ENOIOCTLCMD;
 *      	}
 *      
 *     +	mutex_lock(&lec_mutex);
 *      	switch (cmd) {
 *      	case ATMLEC_CTRL:
 *      		err = lecd_attach(vcc, (int)arg);
 *     @@ -1017,6 +1023,7 @@ static int lane_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 *      		break;
 *      	}
 *      
 *     +	mutex_unlock(&lec_mutex);
 *      	return err;
 *      }
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38323
 * @remediation
 * @patch-description |
 *     net: atm: add lec_mutex
 *     syzbot found its way in net/atm/lec.c, and found an error path
 *     in lecd_attach() could leave a dangling pointer in dev_lec[].
 *     
 *     Add a mutex to protect dev_lecp[] uses from lecd_attach(),
 *     lec_vcc_attach() and lec_mcast_attach().
 *     
 *     Following patch will use this mutex for /proc/net/atm/lec.
 *     
 *     BUG: KASAN: slab-use-after-free in lecd_attach net/atm/lec.c:751 [inline]
 *     BUG: KASAN: slab-use-after-free in lane_ioctl+0x2224/0x23e0 net/atm/lec.c:1008
 *     Read of size 8 at addr ffff88807c7b8e68 by task syz.1.17/6142
 *     
 *     CPU: 1 UID: 0 PID: 6142 Comm: syz.1.17 Not tainted 6.16.0-rc1-syzkaller-00239-g08215f5486ec #0 PREEMPT(full)
 *     Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/07/2025
 *     Call Trace:
 *      <TASK>
 *       __dump_stack lib/dump_stack.c:94 [inline]
 *       dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120
 *       print_address_description mm/kasan/report.c:408 [inline]
 *       print_report+0xcd/0x680 mm/kasan/report.c:521
 *       kasan_report+0xe0/0x110 mm/kasan/report.c:634
 *       lecd_attach net/atm/lec.c:751 [inline]
 *       lane_ioctl+0x2224/0x23e0 net/atm/lec.c:1008
 *       do_vcc_ioctl+0x12c/0x930 net/atm/ioctl.c:159
 *       sock_do_ioctl+0x118/0x280 net/socket.c:1190
 *       sock_ioctl+0x227/0x6b0 net/socket.c:1311
 *       vfs_ioctl fs/ioctl.c:51 [inline]
 *       __do_sys_ioctl fs/ioctl.c:907 [inline]
 *       __se_sys_ioctl fs/ioctl.c:893 [inline]
 *       __x64_sys_ioctl+0x18e/0x210 fs/ioctl.c:893
 *       do_syscall_x64 arch/x86/entry/syscall_64.c:63 [inline]
 *       do_syscall_64+0xcd/0x4c0 arch/x86/entry/syscall_64.c:94
 *      entry_SYSCALL_64_after_hwframe+0x77/0x7f
 *      </TASK>
 *     
 *     Allocated by task 6132:
 *       kasan_save_stack+0x33/0x60 mm/kasan/common.c:47
 *       kasan_save_track+0x14/0x30 mm/kasan/common.c:68
 *       poison_kmalloc_redzone mm/kasan/common.c:377 [inline]
 *       __kasan_kmalloc+0xaa/0xb0 mm/kasan/common.c:394
 *       kasan_kmalloc include/linux/kasan.h:260 [inline]
 *       __do_kmalloc_node mm/slub.c:4328 [inline]
 *       __kvmalloc_node_noprof+0x27b/0x620 mm/slub.c:5015
 *       alloc_netdev_mqs+0xd2/0x1570 net/core/dev.c:11711
 *       lecd_attach net/atm/lec.c:737 [inline]
 *       lane_ioctl+0x17db/0x23e0 net/atm/lec.c:1008
 *       do_vcc_ioctl+0x12c/0x930 net/atm/ioctl.c:159
 *       sock_do_ioctl+0x118/0x280 net/socket.c:1190
 *       sock_ioctl+0x227/0x6b0 net/socket.c:1311
 *       vfs_ioctl fs/ioctl.c:51 [inline]
 *       __do_sys_ioctl fs/ioctl.c:907 [inline]
 *       __se_sys_ioctl fs/ioctl.c:893 [inline]
 *       __x64_sys_ioctl+0x18e/0x210 fs/ioctl.c:893
 *       do_syscall_x64 arch/x86/entry/syscall_64.c:63 [inline]
 *       do_syscall_64+0xcd/0x4c0 arch/x86/entry/syscall_64.c:94
 *      entry_SYSCALL_64_after_hwframe+0x77/0x7f
 *     
 *     Freed by task 6132:
 *       kasan_save_stack+0x33/0x60 mm/kasan/common.c:47
 *       kasan_save_track+0x14/0x30 mm/kasan/common.c:68
 *       kasan_save_free_info+0x3b/0x60 mm/kasan/generic.c:576
 *       poison_slab_object mm/kasan/common.c:247 [inline]
 *       __kasan_slab_free+0x51/0x70 mm/kasan/common.c:264
 *       kasan_slab_free include/linux/kasan.h:233 [inline]
 *       slab_free_hook mm/slub.c:2381 [inline]
 *       slab_free mm/slub.c:4643 [inline]
 *       kfree+0x2b4/0x4d0 mm/slub.c:4842
 *       free_netdev+0x6c5/0x910 net/core/dev.c:11892
 *       lecd_attach net/atm/lec.c:744 [inline]
 *       lane_ioctl+0x1ce8/0x23e0 net/atm/lec.c:1008
 *       do_vcc_ioctl+0x12c/0x930 net/atm/ioctl.c:159
 *       sock_do_ioctl+0x118/0x280 net/socket.c:1190
 *       sock_ioctl+0x227/0x6b0 net/socket.c:1311
 *       vfs_ioctl fs/ioctl.c:51 [inline]
 *       __do_sys_ioctl fs/ioctl.c:907 [inline]
 *       __se_sys_ioctl fs/ioctl.c:893 [inline]
 *       __x64_sys_ioctl+0x18e/0x210 fs/ioctl.c:893
 */

import cpp

// 全局数组变量
class GlobalArray extends GlobalVariable {
  GlobalArray() {
    this.getType() instanceof ArrayType
  }
}

// 可能在并发环境中调用的函数
class ConcurrentFunction extends Function {
  ConcurrentFunction() {
    // 从ioctl处理函数调用的函数
    exists(FunctionCall fc |
      fc.getTarget() = this and
      fc.getEnclosingFunction().getName().matches("%ioctl%")
    ) or
    // 包含lockdep断言的函数（表明它们期望锁保护）
    exists(FunctionCall fc |
      fc.getTarget().getName() = "lockdep_assert_held" and
      fc.getEnclosingFunction() = this
    ) or
    // 访问全局状态且没有明显锁保护的函数
    this.getName().matches("lec_%") or
    this.getName().matches("lecd_%")
  }
}

// 访问全局数组的表达式
class GlobalArrayAccess extends Expr {
  GlobalArray ga;
  
  GlobalArrayAccess() {
    (
      // 直接数组访问：dev_lec[i]
      this.(ArrayExpr).getArrayBase().(VariableAccess).getTarget() = ga or
      // 对数组元素赋值：dev_lec[i] = ...
      this.(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget() = ga or
      // 在其他上下文中读取数组元素
      this.(VariableAccess).getTarget() = ga
    )
  }
  
  GlobalArray getGlobalArray() { result = ga }
}

// 检查函数或其调用链是否有适当的锁保护
predicate hasLockProtection(Function f) {
  // 函数包含mutex_lock调用
  exists(FunctionCall fc |
    fc.getEnclosingFunction() = f and
    fc.getTarget().getName().matches("%mutex_lock%")
  ) or
  // 函数有lockdep断言
  exists(FunctionCall fc |
    fc.getEnclosingFunction() = f and
    fc.getTarget().getName() = "lockdep_assert_held"
  ) or
  // 函数只从受保护的上下文中调用
  forex(FunctionCall caller |
    caller.getTarget() = f |
    hasLockProtection(caller.getEnclosingFunction())
  )
}

from GlobalArrayAccess access, ConcurrentFunction func, GlobalArray ga
where
  access.getEnclosingFunction() = func and
  access.getGlobalArray() = ga and
  not hasLockProtection(func) and
  // 排除在分配后错误处理中的访问情况
  not exists(FunctionCall fc |
    fc.getTarget().getName().matches("%alloc%") and
    fc.getEnclosingFunction() = func and
    access.(AssignExpr).getRValue().(FunctionCall) = fc
  )
select access, 
  "在并发函数 '" + func.getName() + 
  "' 中对全局数组 '" + ga.getName() + 
  "' 的无保护访问可能导致竞争条件"