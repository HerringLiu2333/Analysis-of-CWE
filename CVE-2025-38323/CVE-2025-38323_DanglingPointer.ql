/**
 * @name 错误路径中的悬垂指针
 * @description 检测在错误处理路径中释放内存后未将指针设置为NULL的情况
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/dangling-pointer-in-error-path
 * @tags security
 *       correctness
 *       memory-management
 *       use-after-free
 */

import cpp

// 内存释放函数
class MemoryFreeFunction extends Function {
  MemoryFreeFunction() {
    this.getName() in ["free", "kfree", "free_netdev", "vfree", "kvfree", "kzfree"]
  }
}

// 内存分配函数
class MemoryAllocFunction extends Function {
  MemoryAllocFunction() {
    this.getName().matches("%alloc%") or
    this.getName() in ["malloc", "kmalloc", "vmalloc", "kzalloc", "alloc_netdev", "alloc_netdev_mqs"]
  }
}

// 指针变量（包括数组元素）
class PointerVariable extends Variable {
  PointerVariable() {
    this.getType() instanceof PointerType or
    this.getType().(ArrayType).getBaseType() instanceof PointerType
  }
}

// 指针赋值表达式
class PointerAssignment extends AssignExpr {
  PointerVariable pv;
  
  PointerAssignment() {
    (
      // 直接指针赋值：ptr = alloc()
      this.getLValue().(VariableAccess).getTarget() = pv or
      // 数组元素指针赋值：arr[i] = alloc()
      this.getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget() = pv
    ) and
    this.getRValue() instanceof FunctionCall
  }
  
  PointerVariable getPointerVariable() { result = pv }
}

// 释放指针的函数调用
class PointerFreeCall extends FunctionCall {
  PointerVariable pv;
  
  PointerFreeCall() {
    this.getTarget() instanceof MemoryFreeFunction and
    (
      // 直接释放：free(ptr)
      this.getArgument(0).(VariableAccess).getTarget() = pv or
      // 释放数组元素：free(arr[i])
      this.getArgument(0).(ArrayExpr).getArrayBase().(VariableAccess).getTarget() = pv
    )
  }
  
  PointerVariable getPointerVariable() { result = pv }
}

// 错误处理块或条件
predicate inErrorHandlingPath(Stmt s) {
  // 在if语句的then分支中，且条件是错误检查
  exists(IfStmt ifstmt |
    ifstmt.getThen().getAChild*() = s and
    (
      // 函数调用失败检查：if (func() < 0) 或 if (func())
      exists(FunctionCall fc | ifstmt.getCondition().(ComparisonOperation).getAnOperand() = fc) or
      ifstmt.getCondition() instanceof FunctionCall or
      // 返回值检查：if (ret != 0) 或 if (err)
      exists(VariableAccess va | 
        ifstmt.getCondition().(ComparisonOperation).getAnOperand() = va and
        (va.getTarget().getName().matches("%err%") or va.getTarget().getName().matches("%ret%"))
      ) or
      exists(VariableAccess va |
        ifstmt.getCondition() = va and
        (va.getTarget().getName().matches("%err%") or va.getTarget().getName().matches("%ret%"))
      )
    )
  ) or
  // 在包含return语句的块中，且返回错误值
  exists(ReturnStmt rs |
    rs.getParent+() = s.getParent() and
    (
      rs.getExpr() instanceof UnaryMinusExpr or // return -EINVAL
      (rs.getExpr().(Literal).getValue().toInt() < 0) or // return -1
      exists(VariableAccess va |
        rs.getExpr() = va and
        va.getTarget().getName().matches("%err%")
      )
    )
  ) or
  // 在goto错误标签附近
  exists(GotoStmt gs, LabelStmt label |
    gs.getParent+() = s.getParent() and
    gs.getTarget() = label and
    label.getName().matches("%err%")
  )
}

// 检查指针是否在释放后被设置为NULL
predicate pointerSetToNullAfterFree(PointerFreeCall freeCall, PointerVariable pv) {
  exists(AssignExpr nullAssign |
    // 释放调用之后的赋值
    nullAssign.getLocation().getStartLine() > freeCall.getLocation().getStartLine() and
    nullAssign.getEnclosingFunction() = freeCall.getEnclosingFunction() and
    (
      // 直接赋值NULL：ptr = NULL
      nullAssign.getLValue().(VariableAccess).getTarget() = pv and
      (nullAssign.getRValue().(Literal).getValue() = "0" or 
       nullAssign.getRValue() instanceof NullValue) or
      // 数组元素赋值NULL：arr[i] = NULL
      nullAssign.getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget() = pv and
      (nullAssign.getRValue().(Literal).getValue() = "0" or 
       nullAssign.getRValue() instanceof NullValue)
    ) and
    // 在同一个基本块或控制流路径中
    exists(BasicBlock bb |
      bb.contains(freeCall) and bb.contains(nullAssign)
    )
  )
}

// 检查指针分配是否来自内存分配函数
predicate pointerFromAllocation(PointerAssignment assign) {
  assign.getRValue().(FunctionCall).getTarget() instanceof MemoryAllocFunction
}

from PointerFreeCall freeCall, PointerVariable pv, PointerAssignment assign
where
  freeCall.getPointerVariable() = pv and
  assign.getPointerVariable() = pv and
  // 释放调用在分配之后
  freeCall.getLocation().getStartLine() > assign.getLocation().getStartLine() and
  // 分配来自内存分配函数
  pointerFromAllocation(assign) and
  // 释放发生在错误处理路径中
  inErrorHandlingPath(freeCall.getParent()) and
  // 释放后没有将指针设置为NULL
  not pointerSetToNullAfterFree(freeCall, pv) and
  // 在同一个函数中
  freeCall.getEnclosingFunction() = assign.getEnclosingFunction()
select freeCall,
  "在错误处理路径中释放指针 '" + pv.getName() + 
  "' 后未将其设置为NULL，可能导致悬垂指针和释放后使用漏洞"
