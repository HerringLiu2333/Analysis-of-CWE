import cpp

/**
 * Holds if a function call `fc` is considered a "panic" or "bug" call,
 * which is expected to terminate execution.
 */
predicate isPanicCall(FunctionCall fc) {
  // Matches function names like '..._panic', '..._bug', 'BUG', etc.
  // This can be expanded based on the codebase's conventions.
  fc.getTarget().getName().regexpMatch("(?i).*(panic|bug).*")
}

/**
 * Holds if a statement `s` explicitly terminates control flow within a function.
 */
predicate isTerminator(Stmt s) {
  s instanceof ReturnStmt or
  s instanceof GotoStmt or
  s instanceof BreakStmt or
  s instanceof ContinueStmt
}

from IfStmt ifStmt, FunctionCall isErr, FunctionCall panicCall
where
  // 1. Find an 'if' statement whose condition is a call to the IS_ERR.
  isErr = ifStmt.getCondition() and
  isErr.getTarget().getName() = "IS_ERR" and

  // 2. Find a "panic" call within the 'then' branch of this 'if' statement.
  //    The panicCall is a descendant of the 'then' block in the AST.
  panicCall.getEnclosingStmt().getParent*() = ifStmt.getThen() and
  isPanicCall(panicCall) and

  // 3. This is the crucial logic:
  //    Check that the 'then' branch does NOT end with a terminating statement.
  exists(Stmt lastStmt |
    // The 'then' branch can be a single statement or a block of statements.
    // Case A: The 'then' branch is a Block (e.g., if (...) { ... }).
    lastStmt = ifStmt.getThen().(BlockStmt).getLastStmt()
    or
    // Case B: The 'then' branch is a single statement (e.g., if (...) panic();).
    (
      lastStmt = ifStmt.getThen() and
      not ifStmt.getThen() instanceof BlockStmt
    )
  |
    // Ensure this very last statement is NOT a terminator.
    not isTerminator(lastStmt)
  )
select ifStmt