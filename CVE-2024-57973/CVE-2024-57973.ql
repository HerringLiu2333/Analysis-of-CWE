/**
 * @name CVE-2024-57973
 * @description Detects potential integer overflow when adding user-controlled gl->tot_len
 *  to header sizes on 32-bit systems during skb allocation, which can cause
 *  size wraparound and insufficient buffer allocation.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/integer-overflow-addition
 * @tags 
 *  security
 *  correctness
 *  reliability
 *  integer-overflow
 *  external/cwe/cwe-190
 * @patch-commit e53ca458f543aa352d09b484550de173cb9085c2
 * @source-file drivers/infiniband/hw/cxgb4/device.c
 * @affected-function copy_gl_to_skb_pkt
 * @kernel-config N/A
 * @vulnerability-type integer-overflow
 * @patch-diff |
 *  diff --git a/drivers/infiniband/hw/cxgb4/device.c b/drivers/infiniband/hw/cxgb4/device.c
 *  index 541dbcf22d0ebfâ€¦13e4b2c40d835a 100644
 *  --- a/drivers/infiniband/hw/cxgb4/device.c
 *  +++ b/drivers/infiniband/hw/cxgb4/device.c
 *  @@ -1114,8 +1114,10 @@ static inline struct sk_buff *copy_gl_to_skb_pkt(const struct pkt_gl *gl,
 *    * The math here assumes sizeof cpl_pass_accept_req >= sizeof
 *    * cpl_rx_pkt.
 *    &#47;
 *  - skb = alloc_skb(gl->tot_len + sizeof(struct cpl_pass_accept_req) +
 *  - sizeof(struct rss_header) - pktshift, GFP_ATOMIC);
 *  + skb = alloc_skb(size_add(gl->tot_len,
 *  + sizeof(struct cpl_pass_accept_req) +
 *  + sizeof(struct rss_header)) - pktshift,
 *  + GFP_ATOMIC);
 *    if (unlikely(!skb))
 *      return NULL;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=e53ca458f543aa352d09b484550de173cb9085c2
 * @remediation Use overflow-aware helpers (e.g., size_add) when summing lengths and header sizes,
 * and validate user-controlled lengths before allocation to prevent wraparound.
 */


import cpp


from
  FunctionCall alloc_skb, SizeofTypeOperator so
where
  alloc_skb.getTarget().getName() = "alloc_skb" and
  exists(AddExpr addExpr |
    addExpr.getEnclosingStmt() = alloc_skb.getEnclosingStmt() and
    (addExpr.getLeftOperand() = so or
    addExpr.getRightOperand() = so or
    addExpr.getLeftOperand().toString() = "tot_len" or
    addExpr.getRightOperand().toString() = "tot_len")
  ) and
  not exists(FunctionCall size_add |
    size_add.getTarget().getName() = "size_add" and
    size_add.getEnclosingStmt() = alloc_skb.getEnclosingStmt()  
  )
select
  alloc_skb,
  "Potential integer overflow in memory allocation. User-controlled variable used without size_add() protection."
  