/**
 * @name CVE-2024-57988
 * @description Detects uses of devm_kstrdup (and similar allocation helpers) without checking
 *  for a NULL return in btbcm_get_board_name(), which can lead to a NULL pointer
 *  dereference on allocation failure.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/unchecked-null-return
 * @tags 
 *  security
 *  correctness
 *  reliability
 *  null-dereference
 *  external/cwe/cwe-476
 *  external/cwe/cwe-690
 *  external/cwe/cwe-252
 * @patch-commit df2f2d9199e61819cca5da0121dfa4d4cb57000f
 * @source-file drivers/bluetooth/btbcm.c
 * @affected-function btbcm_get_board_name
 * @kernel-config N/A
 * @vulnerability-type null-pointer-dereference
 * @patch-diff |
 *  diff --git a/drivers/bluetooth/btbcm.c b/drivers/bluetooth/btbcm.c
 *  index a1153ada74d206â€¦0a60660fc8ce80 100644
 *  --- a/drivers/bluetooth/btbcm.c
 *  +++ b/drivers/bluetooth/btbcm.c
 *  @@ -553,6 +553,9 @@ static const char *btbcm_get_board_name(struct device dev)
 *
 *    /* get rid of any '/' in the compatible string &#47;
 *    board_type = devm_kstrdup(dev, tmp, GFP_KERNEL);
 *  + if (!board_type)
 *  + return NULL;
 *  +
 *    strreplace(board_type, '/', '-');
 *
 *    return board_type;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=df2f2d9199e61819cca5da0121dfa4d4cb57000f
 * @remediation Always check the return value of allocation helpers (e.g., devm_kstrdup, kstrdup, kmalloc)
 *  and handle failures by returning NULL or an error code as appropriate before dereferencing.
 * @patch-description |
 *  Bluetooth: btbcm: Fix NULL deref in btbcm_get_board_name()
 *  [ Upstream commit b88655bc6593c6a7fdc1248b212d17e581c4334e ]
 *  
 *  devm_kstrdup() can return a NULL pointer on failure,but this
 *  returned value in btbcm_get_board_name() is not checked.
 *  Add NULL check in btbcm_get_board_name(), to handle kernel NULL
 *  pointer dereference error.
 *
 *  Fixes: f9183eaad915 ("Bluetooth: btbcm: Use devm_kstrdup()")
 */



import cpp



from
  AssignExpr allocAssign, FunctionCall devm_kstrdup, FunctionCall strreplace
where
  allocAssign.getRValue() = devm_kstrdup and
  devm_kstrdup.getTarget().getName() = "devm_kstrdup" and
  strreplace.getTarget().getName() = "strreplace" and
  strreplace.getArgument(0).toString() = allocAssign.getLValue().toString() and
  strreplace.getLocation().getStartLine() > allocAssign.getLocation().getStartLine() and
  not exists(IfStmt ifstmt |
    ifstmt.getASuccessor().toString() = allocAssign.getLValue().toString() and
    ifstmt.getLocation().getStartLine() > allocAssign.getLocation().getStartLine() and
    ifstmt.getLocation().getStartLine() < strreplace.getLocation().getStartLine()
  )
select
  strreplace,
  "Potential NULL pointer dereference: Memory allocated at line " +
  allocAssign.getLocation().getStartLine() + " may be NULL, but used without check at line " +
  strreplace.getLocation().getStartLine() + " in function '" +
  strreplace.getEnclosingFunction().getName() + "'.",
  allocAssign,
  "Memory allocation: " + allocAssign.toString()