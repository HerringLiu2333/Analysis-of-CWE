/**
 * @name CVE-2024-58064
 * @description Detects a potential NULL pointer dereference in the KUnit test case for 6GHz co-located AP parsing where kunit_kzalloc() may fail, leading to an unchecked NULL pointer being dereferenced.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/unchecked-null-pointer
 * @tags
 *  security
 *  correctness
 *  reliability
 *  null-dereference
 *  kunit
 *  wifi
 *  external/cwe/cwe-476
 * @patch-commit 886271409603956edd09df229dde7442c410a872
 * @source-file net/wireless/tests/scan.c
 * @affected-function test_cfg80211_parse_colocated_ap
 * @kernel-config N/A
 * @vulnerability-type null-pointer-dereference
 * @patch-diff |
 *  diff --git a/net/wireless/tests/scan.c b/net/wireless/tests/scan.c
 *  index 9f458be7165951…79a99cf5e8922f 100644
 *  --- a/net/wireless/tests/scan.c
 *  +++ b/net/wireless/tests/scan.c
 *  @@ -810,6 +810,8 @@ static void test_cfg80211_parse_colocated_ap(struct kunit *test)
 *    skb_put_data(input, "123", 3);
 *
 *    ies = kunit_kzalloc(test, struct_size(ies, data, input->len), GFP_KERNEL);
 *  + KUNIT_ASSERT_NOT_NULL(test, ies);
 *  +
 *    ies->len = input->len;
 *    memcpy(ies->data, input->data, input->len);
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=886271409603956edd09df229dde7442c410a872
 * @remediation Always check the return value of memory allocation functions (kunit_kzalloc, kzalloc, etc.), especially in test cases, to prevent NULL pointer dereferences. Use appropriate KUNIT_ASSERT macros to fail tests gracefully when allocations fail.
 */
import cpp

/*
 * 检测cfg80211测试中的NULL指针解引用漏洞
 * 该查询用于识别kunit_kzalloc返回值未进行NULL检查就直接使用的情况
 * 这可能导致NULL指针解引用错误
 * This query identifies NULL pointer dereference vulnerabilities where
 * kunit_kzalloc return value is used without NULL check in cfg80211 tests
 */

// 检查是否为test_cfg80211_parse_colocated_ap函数
// Check if it's test_cfg80211_parse_colocated_ap function
predicate isTestCfg80211ParseColocatedApFunction(Function f) {
  f.getName() = "test_cfg80211_parse_colocated_ap"
}

// 检查是否为kunit_kzalloc函数调用
// Check if it's kunit_kzalloc function call
predicate isKunitKzallocCall(FunctionCall fc) {
  fc.getTarget().getName() = "kunit_kzalloc"
}

// 检查是否为ies变量赋值
// Check if it's assignment to ies variable
predicate isIesAssignment(AssignExpr assign) {
  exists(VariableAccess varAccess |
    varAccess = assign.getLValue() and
    varAccess.getTarget().getName() = "ies"
  )
}



from
  Function f,   AssignExpr assign  , AssignExpr len// 赋值表达式
where
  // 限制在test_cfg80211_parse_colocated_ap函数内
  isTestCfg80211ParseColocatedApFunction(f) and
  assign.getEnclosingFunction() = f and
  // 查找ies变量赋值，且右侧是kunit_kzalloc调用
  isIesAssignment(assign) and
  isKunitKzallocCall(assign.getRValue().(FunctionCall)) and
  len.getEnclosingFunction() = f and
  len.getLocation().getStartLine() > assign.getLocation().getStartLine() and
  len.getLValue().toString() = "len" and
  len.getRValue().toString() = "len" and
  // 在赋值后没有NULL检查

  not exists(BlockStmt block |
    block.getLocation().getStartLine() > assign.getLocation().getStartLine() and
    block.getLocation().getStartLine() < len.getLocation().getStartLine()
  )
select
  assign,
  "Potential NULL pointer dereference: kunit_kzalloc() return value assigned to ies without NULL check in test_cfg80211_parse_colocated_ap()"