/**
 * @name CVE-2025-38294
 * @description Detects a NULL pointer dereference within an error handling block. This pattern occurs when a function's return value is checked for an error condition (like being NULL), and the error handling logic itself then incorrectly dereferences this invalid pointer, often for logging purposes.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/null-pointer-dereference-in-error-path
 * @tags security
 *       correctness
 *       external/cwe/cwe-476
 * @patch-commit ea24531d00f782f4e659e8c74578b7ac144720ca
 * @source-file drivers/net/wireless/ath/ath12k/mac.c
 * @affected-function ath12k_mac_op_assign_vif_chanctx
 * @kernel-config CONFIG_ATH12K
 * @vulnerability-type null-pointer-dereference
 * @patch-diff |
 *     @@ -9614,8 +9614,8 @@ ath12k_mac_op_assign_vif_chanctx(struct ieee80211_hw *hw,
 *      
 *      	ar = ath12k_mac_assign_vif_to_vdev(hw, arvif, ctx);
 *      	if (!ar) {
 * -		ath12k_warn(arvif->ar->ab, "failed to assign chanctx for vif %pM link id %u link vif is already started",
 * -			    vif->addr, link_id);
 * +		ath12k_hw_warn(ah, "failed to assign chanctx for vif %pM link id %u link vif is already started",
 * +			       vif->addr, link_id);
 *      		return -EINVAL;
 *      	}
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38294
 * @remediation 
 */

import cpp
import semmle.code.cpp.dataflow.new.DataFlow
import semmle.code.cpp.controlflow.Guards

from FunctionCall assignCall, IfStmt ifStmt, FunctionCall warnCall, Variable ar
where
  // 定位到目标函数
  exists(Function f | 
    assignCall.getEnclosingFunction() = f and
    ifStmt.getEnclosingFunction() = f and
    warnCall.getEnclosingFunction() = f
  ) and
  // 匹配赋值调用
  assignCall.getTarget().getName() = "ath12k_mac_assign_vif_to_vdev" and
  // 匹配if条件判断
  ifStmt.getCondition().(NotExpr).getOperand() = ar.getAnAccess() and
  // 匹配warn调用
  warnCall.getTarget().getName() = "__ath12k_warn" and
  // 确保warn调用在if分支内
  warnCall.getEnclosingStmt().getParent*() = ifStmt.getThen() and
  warnCall.getArgument(0).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getQualifier().toString() = "arvif"
select warnCall, "Potential NULL dereference: warning uses arvif->ar after failed assignment (pre-patch pattern)"