/**
 * @name CVE-2024-58065
 * @description Detects incorrect error handling of devm_kzalloc() result where
 *              IS_ERR() check is used instead of NULL check, potentially missing
 *              allocation failures and propagating invalid pointers.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/null-vs-is-err-check
 * @tags
 *      security
 *      correctness
 *      reliability
 *      null-dereference
 *      external/cwe/cwe-476
 * @patch-commit e5ca5d7b4d7c29246d957dc45d63610584ae3a54
 * @source-file drivers/clk/mmp/clk-pxa1908-apbc.c
 * @affected-function pxa1908_apbc_probe
 * @vulnerability-type null-pointer-dereference
 * @patch-diff |
 *     diff --git a/drivers/clk/mmp/clk-pxa1908-apbc.c b/drivers/clk/mmp/clk-pxa1908-apbc.c
 *     index b93d0846619856..3fd7b5e644f3b6 100644
 *     --- a/drivers/clk/mmp/clk-pxa1908-apbc.c
 *     +++ b/drivers/clk/mmp/clk-pxa1908-apbc.c
 *     @@ -96,8 +96,8 @@ static int pxa1908_apbc_probe(struct platform_device *pdev)
 *      	struct pxa1908_clk_unit *pxa_unit;
 *      
 *      	pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
 *     -	if (IS_ERR(pxa_unit))
 *     -		return PTR_ERR(pxa_unit);
 *     +	if (!pxa_unit)
 *     +		return -ENOMEM;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=e5ca5d7b4d7c29246d957dc45d63610584ae3a54
 * @remediation For APIs that return NULL on failure (e.g., allocation functions),
 *              always check for NULL rather than using IS_ERR() on the result.
 *              Return -ENOMEM on allocation failures to properly propagate errors.
 * @patch-description |
 *  clk: mmp: pxa1908-apbc: Fix NULL vs IS_ERR() check
 *  The devm_kzalloc() function returns NULL on error, not error pointers.
 *  Fix the check.
 *  
 *  Fixes: 51ce55919273 ("clk: mmp: Add Marvell PXA1908 APBC driver")
 */

import cpp

/*
 * 检测时钟驱动中的NULL vs IS_ERR()错误检查问题
 * 该查询用于识别错误使用IS_ERR()检查devm_kzalloc()返回值的情况
 * devm_kzalloc()返回NULL表示失败，而不是错误指针，应该使用NULL检查
 * This query identifies incorrect usage of IS_ERR() to check devm_kzalloc() return value
 * devm_kzalloc() returns NULL on failure, not error pointers
 */

// 检查是否为pxa1908_apbc_probe函数
// Check if it's pxa1908_apbc_probe function
predicate isPxa1908ApbcProbeFunction(Function f) {
  f.getName() = "pxa1908_apbc_probe"
}

// 检查是否为devm_kzalloc函数调用
// Check if it's devm_kzalloc function call
predicate isDevmKzallocCall(FunctionCall fc) {
  fc.getTarget().getName() = "devm_kzalloc"
}

// 检查是否为IS_ERR函数调用
// Check if it's IS_ERR function call
predicate isIsErrCall(FunctionCall fc) {
  fc.getTarget().getName() = "IS_ERR"
}



// 检查IS_ERR调用是否检查devm_kzalloc的返回值
// Check if IS_ERR call checks devm_kzalloc return value
predicate isIsErrCheckingDevmKzalloc(FunctionCall isErrCall, AssignExpr pxa_unit) {
  pxa_unit.getLValue().toString() = isErrCall.getArgument(0).toString()
}



from
  Function f, FunctionCall devmKzallocCall, FunctionCall isErrCall, AssignExpr pxa_unit  
where
  // 限制在pxa1908_apbc_probe函数内
  isPxa1908ApbcProbeFunction(f) and
  devmKzallocCall.getEnclosingFunction() = f and
  isErrCall.getEnclosingFunction() = f and
  // 查找devm_kzalloc调用
  isDevmKzallocCall(devmKzallocCall) and
  // 查找IS_ERR调用
  isIsErrCall(isErrCall) and
  // IS_ERR检查的是devm_kzalloc的返回值
  isIsErrCheckingDevmKzalloc(isErrCall, pxa_unit) and
  pxa_unit.getRValue() = devmKzallocCall

select
  isErrCall,
  "Potential NULL vs IS_ERR() bug: devm_kzalloc() returns NULL on failure, not error pointers. Use NULL check instead of IS_ERR()."