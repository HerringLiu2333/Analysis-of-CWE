/**
 * @name CVE-2024-57983
 * @description mailbox: th1520: The suspend/resume context array intr_mask was undersized
 *              by one element. The driver saves/restores four ICU0 interrupt mask registers,
 *              but defined intr_mask as [TH_1520_MBOX_CHANS - 1], causing out-of-bounds
 *              accesses and memory corruption during system suspend/resume.
 *              The fix sizes intr_mask to [TH_1520_MBOX_CHANS].
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/mailbox-th1520-intr_mask-array-size
 * @tags
 *       mailbox
 *       th1520
 *       suspend-resume
 *       array-bounds
 *       memory-corruption
 *       out-of-bounds
 *       robustness
 *       external/cwe/cwe-787
 * @patch-commit db049866943a38bf46a34fa120d526663339d7a5
 * @source-file drivers/mailbox/mailbox-th1520.c
 * @affected-function th1520_mbox_suspend_noirq
 * @affected-function th1520_mbox_resume_noirq
 * @vulnerability-type out-of-bounds read/write (incorrect array size)
 * @patch-diff |
 *     diff --git a/drivers/mailbox/mailbox-th1520.c b/drivers/mailbox/mailbox-th1520.c
 *     index e16e7c85ee3cd5..a6b2aa9ae95206 100644
 *     --- a/drivers/mailbox/mailbox-th1520.c
 *     +++ b/drivers/mailbox/mailbox-th1520.c
 *     @@ -41,7 +41,7 @@
 *      #ifdef CONFIG_PM_SLEEP
 *      /* store MBOX context across system-wide suspend/resume transitions &#47;
 *      struct th1520_mbox_context {
 *     -	u32 intr_mask[TH_1520_MBOX_CHANS - 1];
 *     +	u32 intr_mask[TH_1520_MBOX_CHANS];
 *      };
 *      #endif
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=db049866943a38bf46a34fa120d526663339d7a5 
 * @remediation Ensure arrays used to save/restore hardware register sets are sized to
 *              exactly match the number of registers accessed. Here, define intr_mask
 *              with TH_1520_MBOX_CHANS elements and keep all loops within [0, TH_1520_MBOX_CHANS).
 */




import cpp

// 查找结构体成员数组
predicate isStructMemberArray(Field f) {
  f.getType().toString().matches("%\\[.*\\]%")  // 包含方括号的类型
}

// 查找数组类型声明
predicate isArrayTypeWithMacro(Type t) {
  t.toString().matches("%TH_1520_MBOX_CHANS%") 
}

// 查找可能不正确的数组大小声明
predicate hasIncorrectArraySize(Type arrayType) {
  isArrayTypeWithMacro(arrayType) and
  (
    // 检查数组大小减一的情况
    arrayType.toString().matches("%TH_1520_MBOX_CHANS.*-.*1%")) 
}

// 主查询：查找数组大小错误
from
  Field arrayField
where
  isStructMemberArray(arrayField) and
  arrayField.getName() = "intr_mask" and  // 特定字段名
  hasIncorrectArraySize(arrayField.getType())
select
  arrayField,
  "Potential memory corruption: Array '" + arrayField.getName() +
  "' declared with incorrect size in type '" + arrayField.getType().toString() +
  "' at line " + arrayField.getLocation().getStartLine() +
  ". This may cause out-of-bounds access in suspend/resume functions."