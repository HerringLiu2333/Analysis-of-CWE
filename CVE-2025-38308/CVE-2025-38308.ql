/**
 * @name CVE-2025-38308 空指针解引用漏洞查询
 * @description 在avs_hw_constraints_init函数中，通过avs_dai_find_path_template函数获取的template指针
 *              在使用前没有进行空指针检查，可能导致空指针解引用漏洞
 * @kind problem
 * @problem.severity error
 * @security-severity 7.5
 * @precision high
 * @id cpp/cve-2025-38308-null-ptr-deref
 * @tags security
 *       external/cve/cve-2025-38308
 *       external/cwe/cwe-476
 */

import cpp

/**
 * 表示可能返回空指针的函数调用
 */
class PotentialNullReturningCall extends FunctionCall {
  PotentialNullReturningCall() {
    // 查找调用avs_dai_find_path_template函数的地方
    this.getTarget().getName() = "avs_dai_find_path_template"
  }
}

/**
 * 表示在avs_hw_constraints_init函数中的危险用法
 */
class VulnerableUsageInFunction extends FunctionCall {
  Variable templateVar;
  
  VulnerableUsageInFunction() {
    // 查找avs_path_set_constraint函数调用
    this.getTarget().getName() = "avs_path_set_constraint" and
    // 确保在avs_hw_constraints_init函数内
    this.getEnclosingFunction().getName() = "avs_hw_constraints_init" and
    // 获取作为参数传递的template变量
    exists(VariableAccess va |
      va = this.getArgument(1) and
      templateVar = va.getTarget() and
      templateVar.getName() = "template"
    )
  }
  
  /**
   * 获取template变量
   */
  Variable getTemplateVariable() {
    result = templateVar
  }
}

/**
 * 表示template变量的定义
 */
class TemplateVariableDefinition extends Variable {
  TemplateVariableDefinition() {
    this.getName() = "template" and
    this.getType().toString().matches("%avs_tplg_path_template%") and
    // 通过变量访问来确定所在函数
    exists(VariableAccess va |
      va.getTarget() = this and
      va.getEnclosingFunction().getName() = "avs_hw_constraints_init"
    )
  }
}

/**
 * 查找template变量被赋值的语句
 */
class TemplateAssignment extends AssignExpr {
  PotentialNullReturningCall nullCall;
  
  TemplateAssignment() {
    // 左侧是template变量的访问
    exists(VariableAccess va |
      va = this.getLValue() and
      va.getTarget().(TemplateVariableDefinition).getName() = "template"
    ) and
    // 右侧是可能返回空指针的函数调用
    nullCall = this.getRValue()
  }
  
  /**
   * 获取可能返回空指针的函数调用
   */
  PotentialNullReturningCall getNullReturningCall() {
    result = nullCall
  }
}

/**
 * 检查在使用template变量之前是否有空指针检查
 */
predicate hasNullCheck(TemplateVariableDefinition templateVar, VulnerableUsageInFunction usage) {
  exists(IfStmt ifStmt, VariableAccess va |
    // if语句在使用之前
    ifStmt.getLocation().getStartLine() > templateVar.getLocation().getStartLine() and
    ifStmt.getLocation().getStartLine() < usage.getLocation().getStartLine() and
    // if语句的条件包含对template变量的检查
    va.getParent*() = ifStmt.getCondition() and
    va.getTarget() = templateVar and
    // 检查是否是空指针比较
    (
      exists(EqualityOperation eq |
        eq.getParent*() = ifStmt.getCondition() and
        (
          (eq.getLeftOperand() = va and eq.getRightOperand().(Literal).getValue() = "0") or
          (eq.getRightOperand() = va and eq.getLeftOperand().(Literal).getValue() = "0")
        )
      )
      or
      exists(NotExpr notExpr |
        notExpr.getParent*() = ifStmt.getCondition() and
        notExpr.getOperand() = va
      )
    )
  )
}

from TemplateAssignment assignment, VulnerableUsageInFunction usage, TemplateVariableDefinition templateVar
where
  // template变量的定义
  templateVar = assignment.getLValue().(VariableAccess).getTarget() and
  // 在使用中涉及相同的template变量
  usage.getTemplateVariable() = templateVar and
  // 赋值语句在使用之前
  assignment.getLocation().getStartLine() < usage.getLocation().getStartLine() and
  // 没有空指针检查
  not hasNullCheck(templateVar, usage) and
  // 确保在同一个函数中
  assignment.getEnclosingFunction() = usage.getEnclosingFunction()
select usage, 
       "在avs_hw_constraints_init函数中，template变量 $@ 被赋值为可能返回NULL的函数调用结果 $@，但在传递给avs_path_set_constraint函数时没有进行空指针检查，可能导致空指针解引用漏洞。",
       templateVar, templateVar.getName(),
       assignment.getNullReturningCall(), "avs_dai_find_path_template"