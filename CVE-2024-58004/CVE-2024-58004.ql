/**
 * @name CVE-2024-58004
 * @description Detects missing cpu_latency_qos_remove_request() call on the error path in
 *  intel IPU6 isys_probe(), which can leave a stale PM QoS request and corrupt
 *  the cpu latency QoS plist (list_add corruption) after freeing the backing
 *  memory.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/missing-qos-remove-request
 * @tags 
 *  security
 *  correctness
 *  reliability
 *  memory-corruption
 *  list-corruption
 * @patch-commit facb541ff0805314e0b56e508f7d3cbd07af513c
 * @source-file drivers/media/pci/intel/ipu6/ipu6-isys.c
 * @affected-function isys_probe
 * @kernel-config N/A
 * @vulnerability-type list-corruption
 * @patch-diff |
 *  diff --git a/drivers/media/pci/intel/ipu6/ipu6-isys.c b/drivers/media/pci/intel/ipu6/ipu6-isys.c
 *  index 7148f8fe23f535…8d7a1ad19ead59 100644
 *  --- a/drivers/media/pci/intel/ipu6/ipu6-isys.c
 *  +++ b/drivers/media/pci/intel/ipu6/ipu6-isys.c
 *  @@ -1133,6 +1133,7 @@ static int isys_probe(struct auxiliary_device *auxdev,
 *    free_fw_msg_bufs:
 *    free_fw_msg_bufs(isys);
 *    out_remove_pkg_dir_shared_buffer:
 *  + cpu_latency_qos_remove_request(&isys->pm_qos);
 *    if (!isp->secure_mode)
 *    ipu6_cpd_free_pkg_dir(adev);
 *    remove_shared_buffer:
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=facb541ff0805314e0b56e508f7d3cbd07af513c
 * @remediation Always remove PM QoS requests in all error and cleanup paths before freeing
 *  associated structures. Specifically, call cpu_latency_qos_remove_request()
 *  on isys->pm_qos in the error unwind path to prevent stale list nodes and
 *  subsequent plist/list corruption.
 */


import cpp

from FunctionCall qosRequest, ReturnStmt returnStmt
where
  // 查找QoS请求函数调用
  (qosRequest.getTarget().getName().matches("%qos_add_request") or
   qosRequest.getTarget().getName().matches("%qos_request%")) and
  // 查找返回语句
  returnStmt.getEnclosingFunction() = qosRequest.getEnclosingFunction() and
  // 检查是否存在从qosRequest到错误返回的路径，但没有清理调用
  exists(ControlFlowNode node |
    node = qosRequest.getASuccessor+() and
    node = returnStmt and
    not exists(FunctionCall cleanupOnError |
      cleanupOnError.getTarget().getName().matches("%qos_remove_request") and
      cleanupOnError.getEnclosingFunction() = qosRequest.getEnclosingFunction() 

    )
  )
select qosRequest, "Potential resource leak: QoS request may not be cleaned up on error paths"