/**
 * @name CVE-2025-38319
 * @description Detects cases where the return value of a function that may return a null pointer is subsequently dereferenced without a proper null-check. This pattern can lead to a null pointer dereference and system instability.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/null-pointer-dereference-unchecked-return
 * @tags security
 *       correctness
 *       external/cwe/cwe-476
 * @patch-commit 820116a39f96bdc7d426c33a804b52f53700a919
 * @source-file drivers/gpu/drm/amd/pm/powerplay/hwmgr/ppatomctrl.c
 * @affected-function atomctrl_initialize_mc_reg_table, atomctrl_initialize_mc_reg_table_v2_2
 * @kernel-config CONFIG_DRM_AMDGPU
 * @vulnerability-type null-pointer-dereference
 * @patch-diff |
 *     @@ -143,6 +143,10 @@ int atomctrl_initialize_mc_reg_table(
 *      	vram_info = (ATOM_VRAM_INFO_HEADER_V2_1 *)
 *      		smu_atom_get_data_table(hwmgr->adev,
 *      				GetIndexIntoMasterTable(DATA, VRAM_Info), &size, &frev, &crev);
 *     +	if (!vram_info) {
 *     +		pr_err("Could not retrieve the VramInfo table!");
 *     +		return -EINVAL;
 *     +	}
 *      
 *      	if (module_index >= vram_info->ucNumOfVRAMModule) {
 *      		pr_err("Invalid VramInfo table.");
 *     @@ -180,6 +184,10 @@ int atomctrl_initialize_mc_reg_table_v2_2(
 *      	vram_info = (ATOM_VRAM_INFO_HEADER_V2_2 *)
 *      		smu_atom_get_data_table(hwmgr->adev,
 *      				GetIndexIntoMasterTable(DATA, VRAM_Info), &size, &frev, &crev);
 *     +	if (!vram_info) {
 *     +		pr_err("Could not retrieve the VramInfo table!");
 *     +		return -EINVAL;
 *     +	}
 *      
 *      	if (module_index >= vram_info->ucNumOfVRAMModule) {
 *      		pr_err("Invalid VramInfo table.");
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38319
 * @patch-description |
 *     drm/amd/pp: Fix potential NULL pointer dereference in atomctrl_initialize_mc_reg_table
 *     The function atomctrl_initialize_mc_reg_table() and
 *     atomctrl_initialize_mc_reg_table_v2_2() does not check the return
 *     value of smu_atom_get_data_table(). If smu_atom_get_data_table()
 *     fails to retrieve vram_info, it returns NULL which is later
 *     dereferenced.
 */

import cpp
/**
 * 查找对变量的空指针检查
 */
predicate hasNullCheck(Variable var, ControlFlowNode afterNode) {
  exists(IfStmt ifStmt, Expr condition |
    // 检查 if (!var) 模式
    (
      (condition instanceof NotExpr and
       condition.(NotExpr).getOperand() = var.getAnAccess()) or
      // 检查 if (var == NULL) 模式
      (condition instanceof EqualityOperation and
       condition.(EqualityOperation).getAnOperand() = var.getAnAccess() and
       condition.(EqualityOperation).getAnOperand().(Literal).getValue() = "0") or
      // 检查 if (!var) 使用逻辑非
      (condition instanceof NotExpr and
       condition.(NotExpr).getOperand() = var.getAnAccess())
    ) and
    ifStmt.getCondition() = condition and
    // 空指针检查必须在smu_atom_get_data_table调用之后
    ifStmt.getLocation().getStartLine() > afterNode.getLocation().getStartLine() and
    // 确保条件分支中包含返回语句或错误处理
    exists(Stmt stmt |
      ifStmt.getThen().getAChild*() = stmt and
      (stmt instanceof ReturnStmt or 
       exists(FunctionCall errorCall |
         stmt.getAChild*() = errorCall and
         errorCall.getTarget().getName().matches("pr_err")
       ))
    )
  )
}

/**
 * 查找对变量的使用（解引用）
 */
predicate hasVariableUsage(Variable var, ControlFlowNode afterNode, Expr usage) {
  (
    // 字段访问，如 vram_info->field
    (usage instanceof PointerFieldAccess and
     usage.(PointerFieldAccess).getQualifier() = var.getAnAccess()) or
    // 数组访问，如 vram_info[index]
    (usage instanceof ArrayExpr and
     usage.(ArrayExpr).getArrayBase() = var.getAnAccess()) or
    // 指针解引用，如 *vram_info
    (usage instanceof PointerDereferenceExpr and
     usage.(PointerDereferenceExpr).getOperand() = var.getAnAccess())
  ) and
  // 使用必须在smu_atom_get_data_table调用之后
  usage.getLocation().getStartLine() > afterNode.getLocation().getStartLine()
}

from Function f, Variable var, FunctionCall call, Expr usage
where
  // 查找smu_atom_get_data_table函数调用
  call.getTarget().getName() = "smu_atom_get_data_table" and
  call.getEnclosingFunction() = f and
  f.getFile().getRelativePath().matches("*ppatomctrl.c") and
  
  // 查找接收返回值的变量（通过赋值表达式）
  exists(AssignExpr assign |
    assign.getRValue() = call and
    assign.getLValue() = var.getAnAccess() and
    assign.getEnclosingFunction() = f
  ) and
  
  // 查找对该变量的使用（解引用）
  hasVariableUsage(var, call, usage) and
  
  // 检查缺少空指针检查
  not hasNullCheck(var, call)

select usage, 
       "在第" + usage.getLocation().getStartLine() + "行对变量 '" + var.getName() + 
       "' 进行解引用，但该变量来自第" + call.getLocation().getStartLine()
