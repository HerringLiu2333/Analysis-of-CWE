/**
 * @name CVE-2024-58085
 * @description tomoyo_write_control() could trigger noisy "too large allocation" warnings when
 * users write extremely long lines without a newline. Buffer growth used kzalloc()
 * without __GFP_NOWARN, causing allocator splats. The fix adds __GFP_NOWARN so the
 * kernel does not emit warnings; if allocation fails, -ENOMEM is returned. Distinguishing
 * between over-32KB and over-KMALLOC_MAX_SIZE is unnecessary; valid lines should be
 * <32KB and failures should simply propagate as -ENOMEM.
 * @kind problem
 * @problem.severity warning
 * @precision high
 * @id cpp/tomoyo-write-control-gfp-nowarn
 * @tags
 *  reliability
 *  robustness
 *  logging
 *  memory-allocation
 *  gfp-flags
 *  dos
 *  tomoyo
 *  lsm
 * @patch-commit fe1c021eb03dae0dc9dce55e81f77a60e419a27a
 * @source-file security/tomoyo/common.c
 * @affected-function tomoyo_write_control
 * @vulnerability-type log-spam-denial-of-service
 * @patch-diff |
 *  diff --git a/security/tomoyo/common.c b/security/tomoyo/common.c
 *  index ea3140d510ecbf…e58e265d16578e 100644
 *  — a/security/tomoyo/common.c
 *  +++ b/security/tomoyo/common.c
 *  @@ -2665,7 +2665,7 @@ ssize_t tomoyo_write_control(struct tomoyo_io_buffer *head,
 *
 *  if (head->w.avail >= head->writebuf_size - 1) {
 *  const int len = head->writebuf_size * 2;
 *  - char *cp = kzalloc(len, GFP_NOFS);
 *  + char *cp = kzalloc(len, GFP_NOFS | __GFP_NOWARN);
 *
 *  if (!cp) {
 *  error = -ENOMEM;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=fe1c021eb03dae0dc9dce55e81f77a60e419a27a
 * @remediation Suppress allocator warning splats for user-influenced large allocations by adding
 * __GFP_NOWARN to kzalloc() when expanding the TOMOYO control write buffer. Propagate
 * allocation failure as -ENOMEM and avoid special-casing KMALLOC_MAX_SIZE; keep lines
 * reasonably bounded (<32KB) under the "too small to fail" rule.
 */

import cpp

/*
 * 检测Tomoyo安全模块中的内存分配警告问题
 * 该查询用于识别在tomoyo_write_control函数中使用kzalloc时未添加__GFP_NOWARN标志的情况
 * 这可能导致在分配大内存时产生警告信息，应该使用__GFP_NOWARN来抑制警告
 * This query identifies missing __GFP_NOWARN flag in kzalloc calls in tomoyo_write_control function
 * which may cause warning messages when allocating large memory, should use __GFP_NOWARN to suppress warnings
 */

// 检查是否为tomoyo_write_control函数
// Check if it's tomoyo_write_control function
predicate isTomoyoWriteControlFunction(Function f) {
  f.getName() = "tomoyo_write_control"
}

// 检查是否为kzalloc函数调用
// Check if it's kzalloc function call
predicate isKzallocCall(FunctionCall fc) {
  fc.getTarget().getName() = "kzalloc"
}

// 检查是否使用GFP_NOFS标志
// Check if GFP_NOFS flag is used
predicate usesGfpNofsFlag(FunctionCall fc) {
  fc.getArgument(1).toString().matches("%GFP_NOFS%")
}

// 检查是否包含__GFP_NOWARN标志
// Check if __GFP_NOWARN flag is included
predicate hasGfpNowarnFlag(FunctionCall fc) {
  fc.getArgument(1).toString().matches("%__GFP_NOWARN%")
}

from
  Function f,
  FunctionCall kzallocCall  // kzalloc调用
where
  // 限制在tomoyo_write_control函数内
  isTomoyoWriteControlFunction(f) and
  kzallocCall.getEnclosingFunction() = f and
  // 查找kzalloc调用
  isKzallocCall(kzallocCall) and
  // 使用GFP_NOFS标志
  usesGfpNofsFlag(kzallocCall) and
  // 没有包含__GFP_NOWARN标志
  not hasGfpNowarnFlag(kzallocCall)
select
  kzallocCall,
  "Potential warning issue: kzalloc() call missing __GFP_NOWARN flag in tomoyo_write_control(), may emit large allocation warnings"
