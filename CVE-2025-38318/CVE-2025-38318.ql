import cpp
import semmle.code.cpp.dataflow.new.DataFlow
import semmle.code.cpp.dataflow.new.TaintTracking

module PlatformDriverDataConfig implements DataFlow::ConfigSig {
  /**
   * 定义污点源：platform_get_drvdata函数的返回值，但仅在没有对应的platform_set_drvdata调用时
   */
  predicate isSource(DataFlow::Node source) {
    exists(FunctionCall call, Function f |
      // 源头是对platform_get_drvdata的函数调用
      source.asExpr() = call and
      // 该调用是对platform_get_drvdata的调用
      call.getTarget().getName() = "platform_get_drvdata" and
      // 该调用必须位于remove函数内部
      f = call.getEnclosingFunction() and
      f.getName() = "arm_ni_remove" and
      // 该函数必须位于指定文件中
      f.getFile().getBaseName() = "arm-ni.c" and
      // 关键：只有当对应的probe函数中没有platform_set_drvdata调用时，才认为是污点源
      not exists(FunctionCall setCall, Function probeFunc |
        setCall.getTarget().getName() = "platform_set_drvdata" and
        probeFunc = setCall.getEnclosingFunction() and
        probeFunc.getName() = "arm_ni_probe" and
        probeFunc.getFile().getBaseName() = "arm-ni.c"
      )
    )
  }

  /**
   * 定义污点汇：对可能为NULL的指针进行解引用的位置
   */
  predicate isSink(DataFlow::Node sink) {
    exists(Expr deref, Function f |
      // 汇是对指针的解引用操作
      (
        // 指针字段访问，如 ni->field
        (deref instanceof PointerFieldAccess and
         sink.asExpr() = deref.(PointerFieldAccess).getQualifier()) or
        // 指针解引用，如 *ni
        (deref instanceof PointerDereferenceExpr and
         sink.asExpr() = deref.(PointerDereferenceExpr).getOperand()) or
        // 数组访问，如 ni[0]
        (deref instanceof ArrayExpr and
         sink.asExpr() = deref.(ArrayExpr).getArrayBase())
      ) and
      // 该解引用必须位于remove函数内部
      f = deref.getEnclosingFunction() and
      f.getName() = "arm_ni_remove" and
      // 该函数必须位于指定文件中
      f.getFile().getBaseName() = "arm-ni.c"
    )
  }

  /**
   * 定义屏障：remove函数中的空指针检查
   */
  predicate isBarrier(DataFlow::Node barrier) {
    exists(IfStmt ifStmt, Expr condition |
      ifStmt.getCondition() = condition and
      (
        // 检查 if (!ptr) 模式
        (condition instanceof NotExpr and
         barrier.asExpr() = condition.(NotExpr).getOperand()) or
        // 检查 if (ptr == NULL) 模式
        (condition instanceof EqualityOperation and
         condition.(EqualityOperation).getAnOperand() = barrier.asExpr() and
         condition.(EqualityOperation).getAnOperand().(Literal).getValue() = "0")
      ) and
      // 确保条件分支中包含返回语句
      exists(ReturnStmt retStmt |
        ifStmt.getThen().getAChild*() = retStmt
      )
    )
  }
}

// 使用上面定义的配置模块来实例化一个全局的污点跟踪分析模块
module PlatformDriverDataFlow = TaintTracking::Global<PlatformDriverDataConfig>;

// 从实例化的分析模块中导入专用的PathGraph，用于路径查询
import PlatformDriverDataFlow::PathGraph

// 查询污点数据流路径
from PlatformDriverDataFlow::PathNode source, PlatformDriverDataFlow::PathNode sink
where PlatformDriverDataFlow::flowPath(source, sink)
select sink.getNode(), source, sink,
       "空指针解引用漏洞：platform_get_drvdata()在第" + source.getNode().getLocation().getStartLine() + 
       "行返回NULL指针，未经空指针检查直接在第" + sink.getNode().getLocation().getStartLine()