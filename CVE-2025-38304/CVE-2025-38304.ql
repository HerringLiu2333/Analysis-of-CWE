import cpp
import semmle.code.cpp.dataflow.DataFlow
import semmle.code.cpp.controlflow.Guards

// 定义目标函数
predicate isTargetFunction(Function f) {
  f.getName() = "eir_get_service_data" and
  f.getFile().getBaseName() = "eir.c"
}

// 定义可选指针参数
predicate isOptionalPointerParam(Parameter p) {
  exists(Function f | isTargetFunction(f) and p = f.getAParameter() |
    p.getType() instanceof PointerType and
    p.getName() = "len"
  )
}

from PointerDereferenceExpr deref, Parameter p
where
  // 确保我们在目标函数中
  exists(Function f | isTargetFunction(f) |
    deref.getEnclosingFunction() = f
  ) and
  // 找到对可选指针参数的解引用
  isOptionalPointerParam(p) and
  deref.getOperand().(VariableAccess).getTarget() = p and
  // 确保解引用不在空指针检查之内
  not exists(IfStmt ifStmt |
    ifStmt.getCondition().getAChild*().(VariableAccess).getTarget() = p and
    ifStmt.getAChild*() = deref.getEnclosingStmt()
  )
select deref, "可能的空指针解引用：参数 " + p.getName() + " 可能为 NULL"