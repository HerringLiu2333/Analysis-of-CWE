/**
 * @name 内存拷贝在大小字段赋值之前执行
 * @description 检测memcpy操作在相关大小字段赋值之前执行的漏洞模式。
 *              这可能导致FORTIFY_SOURCE机制基于未初始化的大小字段进行错误的边界检查。
 * @kind problem
 * @problem.severity error
 * @security-severity 7.5
 * @precision high
 * @id cpp/memcpy-before-size-assignment
 * @tags security
 *       external/cwe/cwe-119
 *       external/cwe/cwe-787
 */

import cpp

/**
 * 表示对结构体成员的memcpy操作
 */
class MemcpyCall extends FunctionCall {
  MemcpyCall() {
    this.getTarget().getName() = "memcpy"
  }
}

/**
 * 表示对size字段的赋值操作
 */
class SizeFieldAssignment extends AssignExpr {
  SizeFieldAssignment() {
    exists(FieldAccess fa |
      fa = this.getLValue() and
      fa.getTarget().getName() = "size"
    )
  }
}

from MemcpyCall memcpy, SizeFieldAssignment sizeAssign
where
  // 1. 两个操作在同一个函数中
  memcpy.getEnclosingFunction() = sizeAssign.getEnclosingFunction() and
  
  // 2. memcpy在size字段赋值之前执行（根据行号判断）
  memcpy.getLocation().getStartLine() < sizeAssign.getLocation().getStartLine()

select memcpy, 
       "memcpy操作在 $@ 之前执行，可能导致FORTIFY_SOURCE机制基于未初始化的size字段进行错误的边界检查。建议先设置size字段再进行内存拷贝。",
       sizeAssign, "size字段赋值"