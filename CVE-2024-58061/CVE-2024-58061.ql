/**
 * @name CVE-2024-58061
 * @description mac80211’s debugfs handler for setting active links allowed parsing
 *              a value of 0, which would deactivate all links. Internally this
 *              triggers a WARN_ON in the API that applies the setting. The fix
 *              rejects zero, preventing deactivation of all links via debugfs.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/mac80211-prohibit-all-links-deactivation
 * @tags
 *   correctness
 *   robustness
 *   input-validation
 *   wifi
 *   mac80211
 *   debugfs
 *   mlo
 * @patch-commit dfe9a043300261afe5eadc07b867a6810c4e999a
 * @source-file net/mac80211/debugfs_netdev.c
 * @affected-function ieee80211_if_parse_active_links
 * @vulnerability-type improper-input-validation
 * @patch-diff
 *   diff --git a/net/mac80211/debugfs_netdev.c b/net/mac80211/debugfs_netdev.c
 *   index 8ced615add712d…f8416965c2198a 100644
 *   --- a/net/mac80211/debugfs_netdev.c
 *   +++ b/net/mac80211/debugfs_netdev.c
 *   @@ -588,7 +588,7 @@ static ssize_t ieee80211_if_parse_active_links(struct ieee80211_sub_if_data *sdata
 *    {
 *            u16 active_links;
 *
 *   -        if (kstrtou16(buf, 0, &active_links))
 *   +        if (kstrtou16(buf, 0, &active_links) || !active_links)
 *                    return -EINVAL;
 *
 *            return ieee80211_set_active_links(&sdata->vif, active_links) ?: buflen;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=dfe9a043300261afe5eadc07b867a6810c4e999a
 * @remediation In ieee80211_if_parse_active_links(), validate that the parsed active_links
 *              is non-zero; return -EINVAL if zero. This prevents deactivating all links
 *              and avoids triggering the internal WARN_ON in the link activation logic.
 */

import cpp

/*
 * 检测mac80211调试功能中的安全漏洞
 * 该查询用于识别在解析活动链接时未检查active_links是否为0的情况
 * 这可能导致禁止所有链接被禁用，从而引发安全问题
 * This query identifies security vulnerabilities where active_links is not checked for zero value
 * which may lead to deactivating all links, causing security issues
 */

// 检查是否为ieee80211_if_parse_active_links函数
// Check if it's ieee80211_if_parse_active_links function
predicate isIeee80211IfParseActiveLinksFunction(Function f) {
  f.getName() = "ieee80211_if_parse_active_links"
}

// 检查是否为kstrtou16函数调用
// Check if it's kstrtou16 function call
predicate isKstrtou16Call(FunctionCall fc) {
  fc.getTarget().getName() = "kstrtou16"
}

// 检查是否为active_links变量
// Check if it's active_links variable
predicate isActiveLinksVariable(Variable v) {
  v.getName() = "active_links"
}

// 检查是否有active_links为零的检查
// Check for active_links zero value check
predicate hasActiveLinksZeroCheck(FunctionCall kstrCall) {
  exists(BinaryOperation binOp |
    binOp.getLocation().getStartLine() > kstrCall.getLocation().getStartLine() and
    binOp.getOperator() = "||" and
    exists(VariableAccess varAccess |
      varAccess = binOp.getRightOperand() and
      isActiveLinksVariable(varAccess.getTarget()) and
      varAccess.toString() = "active_links" and
      binOp.getRightOperand().toString().matches("%!active_links%")
    )
  )
}

from
  Function f,
  FunctionCall kstrCall  // kstrtou16调用
where
  // 限制在ieee80211_if_parse_active_links函数内
  isIeee80211IfParseActiveLinksFunction(f) and
  kstrCall.getEnclosingFunction() = f and
  // 查找kstrtou16调用
  isKstrtou16Call(kstrCall) and
  // 没有active_links为零的检查
  not hasActiveLinksZeroCheck(kstrCall)
select
  kstrCall,
  "Potential security issue: Missing check for active_links zero value, may allow deactivating all links"
