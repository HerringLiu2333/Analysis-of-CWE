/**
 * @name 数组越界访问漏洞 - for循环中可能导致索引越界的模式
 * @description 检测for循环中可能导致数组索引越界的情况，特别是当循环没有break语句或条件不当时
 * @kind problem
 * @problem.severity error
 * @precision medium
 * @id cpp/array-bounds-loop-access
 * @tags security
 *       correctness
 *       external/cwe/cwe-119
 *       external/cwe/cwe-125
 */

import cpp

// 检测潜在的数组越界访问
from ForStmt forLoop, Variable loopVar, ArrayExpr arrayAccess, LTExpr ltExpr,
     VariableAccess indexVar, Variable arrayVar, DivExpr divExpr
where
  // 获取循环变量
  exists(ExprStmt declStmt, AssignExpr vde |
    declStmt = forLoop.getInitialization() and
    vde = declStmt.getExpr() and
    loopVar = vde.getLValue().(VariableAccess).getTarget()
  ) and
  
  // 循环条件是小于比较 (i < something)
  ltExpr = forLoop.getCondition() and
  ltExpr.getLeftOperand().(VariableAccess).getTarget() = loopVar and
  
  // 检测ARRAY_SIZE宏展开后的模式: sizeof(array)/sizeof(array[0])
  divExpr = ltExpr.getRightOperand().(AddExpr).getLeftOperand() and
  exists(SizeofExprOperator sizeofArray, SizeofExprOperator sizeofElement |
    sizeofArray = divExpr.getLeftOperand() and
    sizeofElement = divExpr.getRightOperand() and
    // sizeof(array)
    sizeofArray.getExprOperand().(VariableAccess).getTarget() = arrayVar and
    // sizeof(array[0]) 或 sizeof(*array)
    (
      sizeofElement.getExprOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget() = arrayVar
      or
      sizeofElement.getExprOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget() = arrayVar
    )
  ) and
  
  // 在循环体内存在数组访问
//   arrayAccess.getParent*() = forLoop.getStmt() and
  strictlyDominates(forLoop.getBasicBlock(), arrayAccess.getBasicBlock()) and
  
  // 数组访问使用循环变量作为索引
  indexVar = arrayAccess.getArrayOffset() and
  indexVar.getTarget() = loopVar and
  
  // 数组访问的是同一个数组变量
  arrayAccess.getArrayBase().(VariableAccess).getTarget() = arrayVar

select arrayAccess, 
       "潜在的数组越界访问：循环变量 $@ 可能超出数组边界。当循环条件为 'i < ARRAY_SIZE(array)' 且没有break语句时，在某些条件下索引可能越界访问数组。建议改为 'i < ARRAY_SIZE(array) - 1' 或添加适当的边界检查。",
       loopVar, loopVar.getName()