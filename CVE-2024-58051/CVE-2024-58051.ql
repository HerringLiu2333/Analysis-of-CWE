/**
 * @name CVE-2024-58051
 * @description In the IPMI IPMB driver, the return value of devm_kasprintf() was not
 *              checked. devm_kasprintf() can return NULL on allocation failure; using
 *              the NULL name for miscdevice registration could lead to a NULL pointer
 *              dereference or improper error handling. The fix adds a NULL check and
 *              returns -ENOMEM if allocation fails.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/ipmi-ipmb-kasprintf-null-check
 * @tags
 *   ipmi
 *   ipmb
 *   drivers
 *   robustness
 *   memory-allocation
 *   null-dereference
 *   external/cwe/cwe-476
 * @patch-commit eb288ab33fd87579789cb331209ff09e988ff4f7
 * @source-file drivers/char/ipmi/ipmb_dev_int.c
 * @affected-function ipmb_probe
 * @vulnerability-type null-pointer-dereference
 * @patch-diff
 *   diff --git a/drivers/char/ipmi/ipmb_dev_int.c b/drivers/char/ipmi/ipmb_dev_int.c
 *   index 49b8f22fdcf03b..964bde656f0d3d 100644
 *   --- a/drivers/char/ipmi/ipmb_dev_int.c
 *   +++ b/drivers/char/ipmi/ipmb_dev_int.c
 *   @@ -322,6 +322,9 @@ static int ipmb_probe(struct i2c_client *client,
 *           ipmb_dev->miscdev.name = devm_kasprintf(&client->dev, GFP_KERNEL,
 *                                                   "%s%d", "ipmb-",
 *                                                   client->adapter->nr);
 *   +       if (!ipmb_dev->miscdev.name)
 *   +               return -ENOMEM;
 *   +
 *           ipmb_dev->miscdev.fops = &ipmb_fops;
 *           ipmb_dev->miscdev.parent = &client->dev;
 *           ret = misc_register(&ipmb_dev->miscdev);
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=eb288ab33fd87579789cb331209ff09e988ff4f7
 * @remediation Always validate the return value of devm_kasprintf() before use. If NULL,
 *              propagate an appropriate error (e.g., return -ENOMEM) and avoid dereferencing
 *              or passing the pointer to subsequent APIs (such as misc_register()).
 */

import cpp

/*
 * 检测ipmb_probe函数中devm_kasprintf()使用中的NULL指针解引用漏洞
 * 该查询用于识别devm_kasprintf()返回值直接赋值给miscdev.name字段而未进行NULL检查的情况
 * This query identifies cases where devm_kasprintf() return value is assigned
 * to miscdev.name field without proper NULL check in ipmb_probe function
 */

// 检查是否为ipmb_probe函数
// Check if it's ipmb_probe function
predicate isIpmbProbeFunction(Function f) {
  f.getName() = "ipmb_probe"
}

// 检查是否为devm_kasprintf函数调用
// Check if it's a devm_kasprintf function call
predicate isDevmKasprintfCall(FunctionCall fc) {
  fc.getTarget().getName() = "devm_kasprintf"
}

// 检查是否为ipmb_dev->miscdev.name字段
// Check if it's ipmb_dev->miscdev.name field
predicate isIpmbDevMiscdevNameField(FieldAccess fa) {
  fa.getTarget().getName() = "name" and
  exists(FieldAccess miscdevAccess |
    miscdevAccess = fa.getQualifier() and
    miscdevAccess.getTarget().getName() = "miscdev" and
    exists(FieldAccess ipmbDevAccess |
      ipmbDevAccess = miscdevAccess.getQualifier() and
      ipmbDevAccess.getTarget().getName() = "ipmb_dev"
    )
  )
}

// 检查赋值表达式：ipmb_dev->miscdev.name = devm_kasprintf(...)
// Check assignment: ipmb_dev->miscdev.name = devm_kasprintf(...)
predicate isProblematicAssignment(AssignExpr assign) {
  isIpmbDevMiscdevNameField(assign.getLValue().(FieldAccess)) and
  isDevmKasprintfCall(assign.getRValue().(FunctionCall))
}

// 检查是否有NULL检查
// Check for NULL check
predicate hasNullCheckAfterAssignment(AssignExpr assign) {
  exists(IfStmt ifStmt |
    ifStmt.getLocation().getStartLine() > assign.getLocation().getStartLine() and
    exists(UnaryOperation unaryOp |
      unaryOp = ifStmt.getCondition() and
      unaryOp.getOperator() = "!" and
      unaryOp.getOperand() = assign.getLValue()
    )
  )
}

// 检查是否有返回ENOMEM的处理
// Check for ENOMEM return handling
predicate hasEnomemReturnAfterAssignment(AssignExpr assign) {
  exists(ReturnStmt retStmt |
    retStmt.getExpr().getValue().toInt() = -12 and
    retStmt.getLocation().getStartLine() > assign.getLocation().getStartLine()
  )
}

from
  Function f,
  AssignExpr assign  // 赋值表达式
where
  // 限制在ipmb_probe函数内
  isIpmbProbeFunction(f) and
  assign.getEnclosingFunction() = f and
  // 查找有问题的赋值：ipmb_dev->miscdev.name = devm_kasprintf(...)
  isProblematicAssignment(assign) and
  // 在赋值后没有找到NULL检查
  not hasNullCheckAfterAssignment(assign) and
  // 在赋值后没有找到ENOMEM返回
  not hasEnomemReturnAfterAssignment(assign)
select
  assign,
  "Potential NULL pointer dereference: devm_kasprintf() return value assigned to ipmb_dev->miscdev.name without NULL check in ipmb_probe()"