/**
 * @name 检测free_page调用后的return语句
 * @description 检测free_page函数调用之后是否有return语句，可能导致双重释放漏洞
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/free-page-followed-by-return
 * @tags security
 *       correctness
 *       external/cwe/cwe-415
 */

import cpp

/**
 * 检测free_page函数调用
 */
class FreePageCall extends FunctionCall {
  FreePageCall() {
    this.getTarget().hasName("free_pages")
  }
}

/**
 * 检测free_page调用后是否有return语句
 */
predicate freePageFollowedByReturn(FreePageCall freeCall, ReturnStmt returnStmt) {
  exists(ControlFlowNode freeNode, ControlFlowNode retNode |
    freeNode = freeCall and
    retNode = returnStmt and
    freeNode.getASuccessor+() = retNode
  )
}

from FreePageCall freeCall, ReturnStmt returnStmt
where freePageFollowedByReturn(freeCall, returnStmt)
select freeCall, 
  "发现free_page调用后紧跟return语句，这可能导致双重释放漏洞。" +
  "调用者可能期望在函数返回错误时仍拥有内存所有权。"