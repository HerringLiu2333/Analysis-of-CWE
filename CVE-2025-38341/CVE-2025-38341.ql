/**
 * @name CVE-2025-38341
 * @description The function `fbnic_mbx_map_msg` incorrectly frees the `msg` page upon a DMA mapping error.
 *              The design convention is that the caller retains ownership of the message on error and is responsible for freeing it.
 *              This leads to a double-free vulnerability, as both this function and its caller attempt to free the same memory.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/double-free-on-error-path
 * @tags security
 *       correctness
 *       memory-management
 *       double-free
 *       external/cwe/cwe-415
 * @patch-commit 5bd1bafd4474ee26f504b41aba11f3e2a1175b88
 * @source-file drivers/net/ethernet/meta/fbnic/fbnic_fw.c
 * @affected-function fbnic_mbx_map_msg
 * @kernel-config CONFIG_FBNIC
 * @vulnerability-type double-free
 * @patch-diff |
 *     @@ -127,11 +127,8 @@ static int fbnic_mbx_map_msg(struct fbnic_dev *fbd, int mbx_idx,
 *      		return -EBUSY;
 *      
 *      	addr = dma_map_single(fbd->dev, msg, PAGE_SIZE, direction);
 *     -	if (dma_mapping_error(fbd->dev, addr)) {
 *     -		free_page((unsigned long)msg);
 *     -
 *     +	if (dma_mapping_error(fbd->dev, addr))
 *      		return -ENOSPC;
 *     -	}
 *      
 *      	mbx->buf_info[tail].msg = msg;
 *      	mbx->buf_info[tail].addr = addr;
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38341
 * @remediation
 * @patch-description |
 *     eth: fbnic: avoid double free when failing to DMA-map FW msg
 *     The semantics are that caller of fbnic_mbx_map_msg() retains
 *     the ownership of the message on error. All existing callers
 *     dutifully free the page.
 */

import cpp

/**
 * 检测free_page函数调用
 */
class FreePageCall extends FunctionCall {
  FreePageCall() {
    this.getTarget().hasName("free_pages")
  }
}

/**
 * 检测free_page调用后是否有return语句
 */
predicate freePageFollowedByReturn(FreePageCall freeCall, ReturnStmt returnStmt) {
  exists(ControlFlowNode freeNode, ControlFlowNode retNode |
    freeNode = freeCall and
    retNode = returnStmt and
    freeNode.getASuccessor+() = retNode
  )
}

from FreePageCall freeCall, ReturnStmt returnStmt
where freePageFollowedByReturn(freeCall, returnStmt)
select freeCall, 
  "发现free_page调用后紧跟return语句，这可能导致双重释放漏洞。" +
  "调用者可能期望在函数返回错误时仍拥有内存所有权。"