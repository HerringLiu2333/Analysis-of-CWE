/**
 * @name memcpy使用了修改后的长度而非原始长度
 * @description 检测memcpy函数使用了被修改过的长度变量，而不是原始的长度值，可能导致越界读取
 * @kind problem
 * @problem.severity error
 * @id cpp/memcpy-with-modified-length
 * @tags security
 *       external/cwe/cwe-125
 */

import cpp

/**
 * 表示memcpy函数调用
 */
class MemcpyCall extends FunctionCall {
  MemcpyCall() {
    this.getTarget().getName() = "memcpy"
  }
}

from MemcpyCall memcpy, Variable lengthVar, Assignment assign
where
  // memcpy的第三个参数（长度参数）使用了某个变量
  memcpy.getArgument(2).(VariableAccess).getTarget() = lengthVar and
  
  // 这个长度变量在memcpy调用之前被赋值修改过
  assign.getLValue().(VariableAccess).getTarget() = lengthVar and
  dominates(assign.getBasicBlock(), memcpy.getBasicBlock()) and
  
  // 赋值的右边是一个函数调用或表达式（表明长度被修改了）
  (assign.getRValue() instanceof FunctionCall or
   assign.getRValue() instanceof BinaryOperation) and
  
  // 确保在同一个函数中
  assign.getEnclosingFunction() = memcpy.getEnclosingFunction()

select memcpy, "memcpy的长度参数使用了被修改的变量 '" + lengthVar.getName() + 
              "'，请检查是否应该使用原始长度以避免越界读取"