import cpp

// 查找vp_modern_avq_done函数
class VpModernAvqDoneFunction extends Function {
  VpModernAvqDoneFunction() {
    this.getName() = "vp_modern_avq_done"
  }
}

// 查找virtqueue_get_buf函数调用
class VirtqueueGetBufCall extends FunctionCall {
  VirtqueueGetBufCall() {
    this.getTarget().getName() = "virtqueue_get_buf"
  }
  
  // 获取长度参数（第二个参数）
  Variable getLengthVariable() {
    exists(AddressOfExpr addr |
      addr = this.getArgument(1) and
      result = addr.getOperand().(VariableAccess).getTarget()
    )
  }
}

// 查找对result_sg_size字段的直接赋值
class ResultSgSizeAssignment extends AssignExpr {
  ResultSgSizeAssignment() {
    // 左侧是对result_sg_size字段的访问
    this.getLValue().(FieldAccess).getTarget().getName() = "result_sg_size"
  }
  
  // 获取赋值的右侧表达式
  Expr getRightOperand() {
    result = this.getRValue()
  }
}

// 主查询：查找漏洞模式
from VpModernAvqDoneFunction func, 
     VirtqueueGetBufCall getbufCall,
     ResultSgSizeAssignment assignment,
     Variable lenVar
where
  // virtqueue_get_buf调用在vp_modern_avq_done函数内
  getbufCall.getEnclosingFunction() = func and
  
  // 赋值操作在同一个函数内
  assignment.getEnclosingFunction() = func and
  
  // 获取长度变量
  lenVar = getbufCall.getLengthVariable() and
  
  // 赋值的右侧直接使用了长度变量，没有减去状态大小
  assignment.getRightOperand().(VariableAccess).getTarget() = lenVar and
  
  // 确保这个赋值没有进行任何减法操作（即直接赋值）
  not assignment.getRightOperand() instanceof SubExpr and
  
  // 确保赋值语句在virtqueue_get_buf调用之后
  assignment.getLocation().getStartLine() > getbufCall.getLocation().getStartLine()

select assignment, 
       "位置：函数 " + func.getName() + " 中的第 " + assignment.getLocation().getStartLine() + " 行"