/**
 * @name CVE-2025-38314
 * @description In the virtio admin command completion handler, the result size is incorrectly calculated.
 *              The length obtained from `virtqueue_get_buf()` includes both the result data and an 8-byte status field.
 *              The driver erroneously uses this total length as the result data size, leading to an oversized value.
 *              This can cause out-of-bounds reads when other subsystems (e.g., during live migration)
 *              attempt to access the result data using the incorrect, larger size.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/incorrect-buffer-size-calculation
 * @tags security
 *       correctness
 *       external/cwe/cwe-125
 *       external/cwe/cwe-131
 * @patch-commit 9ef41ebf787fcbde99ac404ae473f8467641f983
 * @source-file drivers/virtio/virtio_pci_modern.c
 * @affected-function vp_modern_avq_done
 * @kernel-config CONFIG_VIRTIO_PCI
 * @vulnerability-type buffer-over-read
 * @patch-diff |
 *     @@ -48,6 +48,7 @@ void vp_modern_avq_done(struct virtqueue *vq)
 *      {
 *      	struct virtio_pci_device *vp_dev = to_vp_device(vq->vdev);
 *      	struct virtio_pci_admin_vq *admin_vq = &vp_dev->admin_vq;
 *     +	unsigned int status_size = sizeof(struct virtio_admin_cmd_status);
 *      	struct virtio_admin_cmd *cmd;
 *      	unsigned long flags;
 *      	unsigned int len;
 *     @@ -56,7 +57,17 @@ void vp_modern_avq_done(struct virtqueue *vq)
 *      	do {
 *      		virtqueue_disable_cb(vq);
 *      		while ((cmd = virtqueue_get_buf(vq, &len))) {
 *     -			cmd->result_sg_size = len;
 *     +			/* If the number of bytes written by the device is less
 *     +			 * than the size of struct virtio_admin_cmd_status, the
 *     +			 * remaining status bytes will remain zero-initialized,
 *     +			 * since the buffer was zeroed during allocation.
 *     +			 * In this case, set the size of command_specific_result
 *     +			 * to 0.
 *     +			 *&#47;
 *     +			if (len < status_size)
 *     +				cmd->result_sg_size = 0;
 *     +			else
 *     +				cmd->result_sg_size = len - status_size;
 *      			complete(&cmd->completion);
 *      		}
 *      	} while (!virtqueue_enable_cb(vq));
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38314
 * @patch-description |
 *     virtio-pci: Fix result size returned for the admin command completion
 *     The result size returned by virtio_pci_admin_dev_parts_get() is 8 bytes
 *     larger than the actual result data size. This occurs because the
 *     result_sg_size field of the command is filled with the result length
 *     from virtqueue_get_buf(), which includes both the data size and an
 *     additional 8 bytes of status.
 *     
 *     This oversized result size causes two issues:
 *     1. The state transferred to the destination includes 8 bytes of extra
 *        data at the end.
 *     2. The allocated buffer in the kernel may be smaller than the returned
 *        size, leading to failures when reading beyond the allocated size.
 *     
 *     The commit fixes this by subtracting the status size from the result of
 *     virtqueue_get_buf().
 *     
 *     This fix has been tested through live migrations with virtio-net,
 *     virtio-net-transitional, and virtio-blk devices.
 */

import cpp

// 查找vp_modern_avq_done函数
class VpModernAvqDoneFunction extends Function {
  VpModernAvqDoneFunction() {
    this.getName() = "vp_modern_avq_done"
  }
}

// 查找virtqueue_get_buf函数调用
class VirtqueueGetBufCall extends FunctionCall {
  VirtqueueGetBufCall() {
    this.getTarget().getName() = "virtqueue_get_buf"
  }
  
  // 获取长度参数（第二个参数）
  Variable getLengthVariable() {
    exists(AddressOfExpr addr |
      addr = this.getArgument(1) and
      result = addr.getOperand().(VariableAccess).getTarget()
    )
  }
}

// 查找对result_sg_size字段的直接赋值
class ResultSgSizeAssignment extends AssignExpr {
  ResultSgSizeAssignment() {
    // 左侧是对result_sg_size字段的访问
    this.getLValue().(FieldAccess).getTarget().getName() = "result_sg_size"
  }
  
  // 获取赋值的右侧表达式
  Expr getRightOperand() {
    result = this.getRValue()
  }
}

// 主查询：查找漏洞模式
from VpModernAvqDoneFunction func, 
     VirtqueueGetBufCall getbufCall,
     ResultSgSizeAssignment assignment,
     Variable lenVar
where
  // virtqueue_get_buf调用在vp_modern_avq_done函数内
  getbufCall.getEnclosingFunction() = func and
  
  // 赋值操作在同一个函数内
  assignment.getEnclosingFunction() = func and
  
  // 获取长度变量
  lenVar = getbufCall.getLengthVariable() and
  
  // 赋值的右侧直接使用了长度变量，没有减去状态大小
  assignment.getRightOperand().(VariableAccess).getTarget() = lenVar and
  
  // 确保这个赋值没有进行任何减法操作（即直接赋值）
  not assignment.getRightOperand() instanceof SubExpr and
  
  // 确保赋值语句在virtqueue_get_buf调用之后
  assignment.getLocation().getStartLine() > getbufCall.getLocation().getStartLine()

select assignment, 
       "位置：函数 " + func.getName() + " 中的第 " + assignment.getLocation().getStartLine() + " 行"