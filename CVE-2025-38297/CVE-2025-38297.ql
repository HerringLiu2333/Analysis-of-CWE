/**
 * @name CVE-2025-38297
 * @description Detects a potential division-by-zero error in the energy model cost calculation.
 *              The 'performance' member of the em_perf_state struct, which is used as a divisor,
 *              is not initialized for non-CPU devices. This can lead to a system crash if
 *              em_compute_costs() is called by a non-CPU device driver.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/division-by-zero
 * @tags security
 *       correctness
 *       external/cwe/cwe-369
 * @patch-commit 179c0c7044a378198adb36f2a12410ab68cc730a
 * @source-file kernel/power/energy_model.c
 * @affected-function em_compute_costs
 * @kernel-config CONFIG_ENERGY_MODEL
 * @vulnerability-type division-by-zero
 * @patch-diff |
 *      @@ -233,6 +233,10 @@ static int em_compute_costs(struct device *dev, struct em_perf_state *table,
 *       	unsigned long prev_cost = ULONG_MAX;
 *       	int i, ret;
 *      
 *      +	/* This is needed only for CPUs and EAS skip other devices *&#47;
 *      +	if (!_is_cpu_device(dev))
 *      +		return 0;
 *      +
 *       	/* Compute the cost of each performance state. *&#47;
 *       	for (i = nr_states - 1; i >= 0; i--) {
 *       		unsigned long power_res, cost;
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38297
 * @remediation 
 * @patch-description |
 *     PM: EM: Fix potential division-by-zero error in em_compute_costs()
 *     When the device is of a non-CPU type, table[i].performance won't be
 *     initialized in the previous em_init_performance(), resulting in division
 *     by zero when calculating costs in em_compute_costs().
 *     
 *     Since the 'cost' algorithm is only used for EAS energy efficiency
 *     calculations and is currently not utilized by other device drivers, we
 *     should add the _is_cpu_device(dev) check to prevent this division-by-zero
 *     issue.
 */

import cpp

/**
 * 匹配除法表达式中的 performance 字段访问
 */
class PerformanceDivExpr extends DivExpr {
  PerformanceDivExpr() {
    exists(FieldAccess fa |
      fa.getTarget().hasName("performance") and
      this.getRightOperand() = fa
    )
  }
}

/**
 * 函数中是否存在补丁引入的 CPU 设备保护：
 *   if (!_is_cpu_device(dev)) return 0; (允许中间有花括号或空语句)
 */
predicate hasCpuEarlyReturnGuard(Function f) {
  exists(IfStmt ifs, ReturnStmt ret, NotExpr ne |
    ifs.getEnclosingFunction() = f and
    ret.getEnclosingFunction() = f and
    ne = ifs.getCondition() and
    // 条件形如 !_is_cpu_device(...)
    ne.getOperand().toString().matches("%_is_cpu_device%") and
    // return 语句位于 then 分支内部
    ret.getEnclosingStmt().getParent*() = ifs.getThen()
  )
}

from Function func, PerformanceDivExpr div
where
  div.getEnclosingFunction() = func and
  // 仅在不存在 CPU 设备早退保护时报告（补丁后应不再命中）
  not hasCpuEarlyReturnGuard(func)
select div, "Potential division by zero: 'performance' may be uninitialized for non-CPU device (missing _is_cpu_device guard)"