/**
 * @name CVE-2024-58052
 * @description In amdgpu powerplay, atomctrl_get_smc_sclk_range_table() did not check the
 *              return value of smu_atom_get_data_table(). On failure it returns NULL and the
 *              code later dereferenced psmu_info, causing a NULL pointer dereference. The fix
 *              adds a NULL check and returns -EINVAL if the SMU_Info table isn't found.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/amdgpu-atomctrl-null-psmu_info-check
 * @tags
 *   gpu
 *   drm
 *   amdgpu
 *   robustness
 *   null-dereference
 *   external/cwe/cwe-476
 * @patch-commit c47066ed7c8f3b320ef87fa6217a2b8b24e127cc
 * @source-file drivers/gpu/drm/amd/pm/powerplay/hwmgr/ppatomctrl.c
 * @affected-function atomctrl_get_smc_sclk_range_table
 * @vulnerability-type null-pointer-dereference
 * @patch-diff
 *   diff --git a/drivers/gpu/drm/amd/pm/powerplay/hwmgr/ppatomctrl.c b/drivers/gpu/drm/amd/pm/powerplay/hwmgr/ppatomctrl.c
 *   index 165af862d05427..04dbd9f89a45d0 100644
 *   --- a/drivers/gpu/drm/amd/pm/powerplay/hwmgr/ppatomctrl.c
 *   +++ b/drivers/gpu/drm/amd/pm/powerplay/hwmgr/ppatomctrl.c
 *   @@ -1370,6 +1370,8 @@ int atomctrl_get_smc_sclk_range_table(struct pp_hwmgr *hwmgr, struct pp_atom_ctr
 *   					    GetIndexIntoMasterTable(DATA, SMU_Info),
 *   					    &size, &frev, &crev);
 *   
 *   +	if (!psmu_info)
 *   +		return -EINVAL;
 *   +
 *   	for (i = 0; i < psmu_info->ucSclkEntryNum; i++) {
 *   		table->entry[i].ucVco_setting = psmu_info->asSclkFcwRangeEntry[i].ucVco_setting;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=c47066ed7c8f3b320ef87fa6217a2b8b24e127cc
 * @remediation After calling smu_atom_get_data_table() for SMU_Info, verify the returned
 *              pointer is non-NULL before dereferencing; on NULL, return -EINVAL to signal
 *              the missing VBIOS data table and avoid a potential crash.
 */

import cpp

/*
 * 检测atomctrl_get_smc_sclk_range_table函数中潜在的NULL指针解引用漏洞
 * 该查询用于识别函数调用返回值未检查NULL就直接解引用的情况
 * This query identifies cases where function return value is dereferenced without NULL check
 */

// 检查是否为atomctrl_get_smc_sclk_range_table函数
// Check if it's atomctrl_get_smc_sclk_range_table function
predicate isTargetFunction(Function f) {
  f.getName() = "atomctrl_get_smc_sclk_range_table"
}

// 检查是否为smu_atom_get_data_table函数调用
// Check if it's smu_atom_get_data_table function call
predicate isSmuAtomGetDataTableCall(FunctionCall fc) {
  fc.getTarget().getName() = "smu_atom_get_data_table"
}

// 检查是否为指针解引用操作（如psmu_info->ucSclkEntryNum）
// Check if it's a pointer dereference operation
predicate isPointerDereference(Expr expr) {
  exists(FieldAccess fa |
    fa = expr and
    // 检查字段访问操作，排除局部变量访问（通过变量名模式识别）
    fa.getQualifier().toString().matches("%psmu_info%")
  )
}

// 检查是否有NULL检查
// Check for NULL check
predicate hasNullCheckBeforeDereference(FunctionCall funcCall, Expr derefExpr) {
  exists(IfStmt ifStmt |
    ifStmt.getLocation().getStartLine() > funcCall.getLocation().getStartLine() and
    ifStmt.getLocation().getStartLine() < derefExpr.getLocation().getStartLine() and
    ifStmt.getCondition().toString().matches("%!psmu_info%")
  )
  or
  exists(ReturnStmt retStmt |
    retStmt.getLocation().getStartLine() > funcCall.getLocation().getStartLine() and
    retStmt.getLocation().getStartLine() < derefExpr.getLocation().getStartLine() and
    retStmt.getExpr().getValue().toInt() = -22
  )
}

from
  Function f,
  FunctionCall funcCall,  // smu_atom_get_data_table调用
  Expr derefExpr          // 指针解引用表达式
where
  // 限制在目标函数内
  isTargetFunction(f) and
  funcCall.getEnclosingFunction() = f and
  derefExpr.getEnclosingFunction() = f and
  // 查找smu_atom_get_data_table调用
  isSmuAtomGetDataTableCall(funcCall) and
  // 查找指针解引用操作
  isPointerDereference(derefExpr) and
  // 在函数调用和解引用之间没有NULL检查
  not hasNullCheckBeforeDereference(funcCall, derefExpr)
select
  derefExpr,
  "Potential NULL pointer dereference: smu_atom_get_data_table() return value dereferenced without NULL check in atomctrl_get_smc_sclk_range_table()"