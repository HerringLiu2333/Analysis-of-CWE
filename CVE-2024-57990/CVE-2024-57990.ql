/**
 * @name CVE-2024-57990
 * @description wifi: mt76: mt7925: An off-by-one bounds check in mt7925_load_clc()
 *              used '>' instead of '>=' when validating clc->idx against
 *              ARRAY_SIZE(phy->clc). This allowed clc->idx == ARRAY_SIZE(...),
 *              leading to potential out-of-bounds read/write. The fix switches
 *              to '>=' to correctly reject the invalid index.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/mt7925-clc-off-by-one-array-bounds
 * @tags
 *       wifi
 *       mt76
 *       mt7925
 *       bounds-check
 *       off-by-one
 *       out-of-bounds
 * @patch-commit d03b8fe1b518fc2ea2d82588e905f56d80cd64b2
 * @source-file drivers/net/wireless/mediatek/mt76/mt7925/mcu.c
 * @affected-function mt7925_load_clc
 * @vulnerability-type off-by-one/out-of-bounds
 * @patch-diff |
 *     diff --git a/drivers/net/wireless/mediatek/mt76/mt7925/mcu.c b/drivers/net/wireless/mediatek/mt76/mt7925/mcu.c
 *     index 748ea6adbc6b39..0c2a2337c313db 100644
 *     --- a/drivers/net/wireless/mediatek/mt76/mt7925/mcu.c
 *     +++ b/drivers/net/wireless/mediatek/mt76/mt7925/mcu.c
 *     @@ -638,7 +638,7 @@ static int mt7925_load_clc(struct mt792x_dev *dev, const char *fw_name)
 *      	for (offset = 0; offset < len; offset += le32_to_cpu(clc->len)) {
 *      		clc = (const struct mt7925_clc *)(clc_base + offset);
 *      
 *     -		if (clc->idx > ARRAY_SIZE(phy->clc))
 *     +		if (clc->idx >= ARRAY_SIZE(phy->clc))
 *      			break;
 *      
 *      		/* do not init buf again if chip reset triggered &#47;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=d03b8fe1b518fc2ea2d82588e905f56d80cd64b2 
 * @remediation Validate indices against array bounds using '>=' to reject the first
 *              out-of-range value (i.e., idx == ARRAY_SIZE). Ensure all uses of
 *              clc->idx are guarded by this check before accessing phy->clc[idx].
 * @patch-description |
 *  wifi: mt76: mt7925: fix off by one in mt7925_load_clc()
 *  [ Upstream commit 08fa656c91fd5fdf47ba393795b9c0d1e97539ed ]
 *  
 *  This comparison should be >= instead of > to prevent an out of bounds
 *  read and write.
 *
 *  Fixes: 9679ca7326e5 ("wifi: mt76: mt7925: fix a potential array-index-out-of-bounds issue for clc")
 */

import cpp

from
  BinaryOperation comp
where
  // 查找 index > ARRAY_SIZE(array) 模式
  comp.toString().matches("%>%") and
  (
    (comp.getLeftOperand().toString().matches("%idx%") and
     comp.getRightOperand().toString().matches("%ARRAY_SIZE%"))
    or
    (comp.getLeftOperand().toString().matches("%ARRAY_SIZE%") and
     comp.getRightOperand().toString().matches("%idx%") and
     comp.toString().matches("%<%"))
  )
select
  comp,
  "Potential off-by-one error: Use '>=' instead of '>' in array bounds check at line " +
  comp.getLocation().getStartLine() + ". Comparison: " + comp.toString(),
  comp.getEnclosingFunction(),
  "Function: " + comp.getEnclosingFunction().getName()