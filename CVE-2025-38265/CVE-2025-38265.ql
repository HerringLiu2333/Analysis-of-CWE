/**
 * @name CVE-2025-38265
 * @description Detects cases where the 'dev' field of a 'uart_port' struct is not initialized
 *              before the struct is passed to the 'serial_core_register_port' function.
 *              This leads to a NULL pointer dereference within the serial core, causing a kernel panic.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/uninitialized-uart-port-dev-field
 * @tags security
 *       correctness
 *       driver
 *       external/cwe/cwe-476
 * @patch-commit e3975aa899c0a3bbc10d035e699b142cd1373a71
 * @source-file drivers/tty/serial/jsm/jsm_tty.c
 * @affected-function jsm_uart_port_init
 * @kernel-config CONFIG_JSM
 * @vulnerability-type null-pointer-dereference
 * @patch-diff |
 *     @@ -451,6 +451,7 @@ int jsm_uart_port_init(struct jsm_board *brd)
 *      		if (!brd->channels[i])
 *      			continue;
 *      
 * +		brd->channels[i]->uart_port.dev = &brd->pci_dev->dev;
 *      		brd->channels[i]->uart_port.irq = brd->irq;
 *      		brd->channels[i]->uart_port.uartclk = 14745600;
 *      		brd->channels[i]->uart_port.type = PORT_JSM;
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38265
 * @patch-description |
 *     serial: jsm: fix NPE during jsm_uart_port_init
 *     No device was set which caused serial_base_ctrl_add to crash.
 *     
 *      BUG: kernel NULL pointer dereference, address: 0000000000000050
 *      Oops: Oops: 0000 [#1] PREEMPT SMP NOPTI
 *      CPU: 16 UID: 0 PID: 368 Comm: (udev-worker) Not tainted 6.12.25-amd64 #1  Debian 6.12.25-1
 *      RIP: 0010:serial_base_ctrl_add+0x96/0x120
 *      Call Trace:
 *       <TASK>
 *       serial_core_register_port+0x1a0/0x580
 *       ? __setup_irq+0x39c/0x660
 *       ? __kmalloc_cache_noprof+0x111/0x310
 *       jsm_uart_port_init+0xe8/0x180 [jsm]
 *       jsm_probe_one+0x1f4/0x410 [jsm]
 *       local_pci_probe+0x42/0x90
 *       pci_device_probe+0x22f/0x270
 *       really_probe+0xdb/0x340
 *       ? pm_runtime_barrier+0x54/0x90
 *       ? __pfx___driver_attach+0x10/0x10
 *       __driver_probe_device+0x78/0x110
 *       driver_probe_device+0x1f/0xa0
 *       __driver_attach+0xba/0x1c0
 *       bus_for_each_dev+0x8c/0xe0
 *       bus_add_driver+0x112/0x1f0
 *       driver_register+0x72/0xd0
 *       jsm_init_module+0x36/0xff0 [jsm]
 *       ? __pfx_jsm_init_module+0x10/0x10 [jsm]
 *       do_one_initcall+0x58/0x310
 *       do_init_module+0x60/0x230
 *     
 *     Tested with Digi Neo PCIe 8 port card.
 */

import cpp

/*
 * 通用逻辑：
 * - 若函数中存在至少一个对 uart_port.dev 的赋值，则认为补丁已应用，不报告。
 * - 若不存在任何 dev 赋值，但出现对其它关键字段(irq/uartclk/type)的初始化，则报告缺失 dev 初始化。
 */

/**
 * 判断一个 FieldAccess 是否形如: brd->channels[...]->uart_port
 * 返回对 uart_port 字段的访问（作为后续字段访问的 base）。
 */
predicate isChannelUartPort(FieldAccess uartPortAccess) {
  uartPortAccess.getTarget().getName() = "uart_port" and
  exists(ArrayExpr channelElem, FieldAccess channelsAccess |
    channelElem = uartPortAccess.getQualifier() and
    channelsAccess = channelElem.getArrayBase() and
    channelsAccess.getTarget().getName() = "channels"
  )
}

/** 某个 uart_port 基访问（如 brd->channels[i]->uart_port）是否对特定字段做了赋值 */
predicate assignsField(FieldAccess uartPortBase, string fieldName) {
  exists(AssignExpr a, FieldAccess lhs |
    lhs = a.getLValue() and
    lhs.getTarget().getName() = fieldName and
    lhs.getQualifier() = uartPortBase
  )
}

/** 目标函数内是否存在任意对 dev 字段的赋值（存在则整体视为已修复，停止报告） */
predicate hasAnyDevAssignment(Function f) {
  exists(FieldAccess b | isChannelUartPort(b) and b.getEnclosingFunction() = f and assignsField(b, "dev"))
}

/**
 * 判断 uartPortBase 是否被用于其下属字段的赋值（写操作），
 * 例如： uartPortBase.dev = ... 或 uartPortBase.irq += 1
 * 若只是 &uartPortBase 作为函数实参或读取其字段，不算写。
 */
predicate isBaseOfFieldAssignment(FieldAccess uartPortBase) {
  exists(AssignExpr a, FieldAccess lhs |
    lhs = a.getLValue() and
    lhs.getQualifier() = uartPortBase
  )
}

/*
 * 仅在：
 *  - 位于目标函数内；
 *  - 函数内不存在任何 dev 赋值；
 *  - 当前 uart_port 对象至少初始化了一个关键字段 (irq/uartclk/type)；
 * 时，报告缺失 dev 初始化。
 */
from FieldAccess uartPortBase, Function f
where
  isBaseOfFieldAssignment(uartPortBase) and
  uartPortBase.getEnclosingFunction() = f and
  isChannelUartPort(uartPortBase) and
  not hasAnyDevAssignment(f)
select uartPortBase,
  "Missing initialization of 'dev' field for uart_port (no uart_port.dev assignment found in function); may cause NULL dereference"