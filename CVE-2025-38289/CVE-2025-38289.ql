import cpp

// 定义目标函数调用
class RefCountFunction extends FunctionCall {
  RefCountFunction() {
    // 匹配 lpfc_nlp_put 函数调用
    this.getTarget().getName() = "lpfc_nlp_put"
  }
}

from Function f, MacroInvocation testBitMacro, FunctionCall setBitMacro, 
     RefCountFunction refCount
where
  // 定位目标函数
  f.getName() = "lpfc_dev_loss_tmo_callbk" and
  f.getFile().getBaseName() = "lpfc_hbadisc.c" and
  
  // 确保所有操作都在同一个函数中
  testBitMacro.getEnclosingFunction() = f and
  setBitMacro.getEnclosingFunction() = f and
  refCount.getEnclosingFunction() = f and
  
  // 确保是test_bit和set_bit操作
  testBitMacro.getMacroName() = "test_bit" and
  setBitMacro.getTarget().getName() = "set_bit" and
  
  // // 确保操作的是同一个标志位（NLP_DROPPED）
  testBitMacro.getExpandedArgument(0).toString().matches("%NLP_DROPPED%") and
  setBitMacro.getArgument(0).toString().matches("%NLP_DROPPED%") and
  
  // 确保操作顺序：先test_bit，后set_bit，最后是引用计数操作
  testBitMacro.getLocation().getStartLine() < setBitMacro.getLocation().getStartLine() and
  setBitMacro.getLocation().getStartLine() < refCount.getLocation().getStartLine()
  
select testBitMacro, 
       testBitMacro,
       setBitMacro,
       refCount, refCount.getTarget().getName()