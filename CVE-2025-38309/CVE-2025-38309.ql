import cpp

from Function vmCreateFunc, FunctionCall allocCall, FunctionCall svmInitCall, FunctionCall closeCall
where
  // 查找xe_vm_create函数
  vmCreateFunc.getName() = "xe_vm_create" and
  
  // 查找相关的函数调用
  allocCall.getEnclosingFunction() = vmCreateFunc and
  allocCall.getTarget().getName() = "drm_gpuvm_resv_object_alloc" and
  
  svmInitCall.getEnclosingFunction() = vmCreateFunc and
  svmInitCall.getTarget().getName() = "xe_svm_init" and
  
  closeCall.getEnclosingFunction() = vmCreateFunc and
  closeCall.getTarget().getName() = "xe_vm_close_and_put" and
  
  // 漏洞模式：内存分配在SVM初始化之前
  allocCall.getLocation().getStartLine() < svmInitCall.getLocation().getStartLine() and
  
  // 确保存在FAULT_MODE相关的条件判断
//   exists(IfStmt ifStmt |
//     ifStmt.getEnclosingFunction() = vmCreateFunc and
//     ifStmt.getCondition().toString().matches("%FAULT_MODE%")
//   )
  
  // 确保存在错误处理标签和goto语句
  exists(GotoStmt gotoStmt, LabelStmt errorLabel |
    gotoStmt.getEnclosingFunction() = vmCreateFunc and
    errorLabel.getEnclosingFunction() = vmCreateFunc and
    gotoStmt.getTarget() = errorLabel and
    errorLabel.getName().matches("err%") and
    gotoStmt.getLocation().getStartLine() > allocCall.getLocation().getStartLine() and
    gotoStmt.getLocation().getStartLine() < svmInitCall.getLocation().getStartLine()
  )

select allocCall, svmInitCall, closeCall