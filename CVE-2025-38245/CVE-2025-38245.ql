import cpp
import semmle.code.cpp.valuenumbering.GlobalValueNumbering

predicate findTargetFunction(Function f, string filePath, string funcName) {
  f.getFile().getRelativePath() = filePath and
  f.getName() = funcName
}

predicate findTargetCall(Function func, FunctionCall fc, string funcName) {
  fc.getEnclosingFunction() = func and
  fc.getTarget().getName() = funcName
}

predicate operateOnSameLock(FunctionCall fc1, FunctionCall fc2) {
  // 先进行廉价的文本比较。这能处理绝大多数情况。
  fc1.getArgument(0).toString() = fc2.getArgument(0).toString()
}

predicate isActivelyProtectedBy(FunctionCall op, FunctionCall lock) {
  // 条件1: lock 必须在 op 之前执行
  strictlyDominates(lock, op) and

  // 条件2: 必须不存在任何一个“干预的解锁”
  not exists(FunctionCall interveningUnlock |
    // a) 这个解锁必须与 lock 匹配
    operateOnSameLock(lock, interveningUnlock) and
    // b) 这个解锁必须位于 lock 和 op 之间
    strictlyDominates(lock, interveningUnlock) and
    strictlyDominates(interveningUnlock, op)
  )
}

from Function func, FunctionCall criticalOp
where
  findTargetFunction(func, "net/atm/resources.c", "atm_dev_deregister") and
  findTargetCall(func, criticalOp, "atm_proc_dev_deregister") and

  not exists(FunctionCall lockCall |
    findTargetCall(func, lockCall, "mutex_lock") and
    isActivelyProtectedBy(criticalOp, lockCall)
  )

select criticalOp