/**
 * @name CVE-2024-57996
 * @description Detects invalid SFQ queue limit configuration (limit = 1) in sch_sfq,
 *  which can trigger queue length underflow and array index out-of-bounds
 *  access in sfq_head, leading to crashes. Reject such configuration with -EINVAL.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/invalid-queue-limit-oob
 * @tags 
 *  security
 *  correctness
 *  reliability
 *  memory-corruption
 *  out-of-bounds
 *  external/cwe/cwe-125
 *  external/cwe/cwe-787
 * @patch-commit 833e9a1c27b82024db7ff5038a51651f48f05e5e
 * @source-file net/sched/sch_sfq.c
 * @affected-function sfq_change
 * @kernel-config N/A
 * @vulnerability-type out-of-bounds-access
 * @patch-diff |
 *  diff --git a/net/sched/sch_sfq.c b/net/sched/sch_sfq.c
 *  index 7d4feae2fae369…60754f366ab7bc 100644
 *  --- a/net/sched/sch_sfq.c
 *  +++ b/net/sched/sch_sfq.c
 *  @@ -652,6 +652,10 @@ static int sfq_change(struct Qdisc *sch, struct nlattr *opt,
 *    if (!p)
 *    return -ENOMEM;
 *    }
 *  + if (ctl->limit == 1) {
 *  + NL_SET_ERR_MSG_MOD(extack, "invalid limit");
 *  + return -EINVAL;
 *  + }
 *    sch_tree_lock(sch);
 *    if (ctl->quantum)
 *    q->quantum = ctl->quantum;
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=833e9a1c27b82024db7ff5038a51651f48f05e5e
 * @remediation Validate sch_sfq parameters: disallow limit values that can break internal
 *  invariants (specifically limit == 1). Enforce a minimum limit (e.g., >= 2)
 *  in sfq_change and return -EINVAL, keeping kernel checks consistent with userspace.
 */


import cpp

// 综合查询：检测SFQ limit参数验证问题
from Function sfqChangeFunc, FunctionCall sch_tree_lock
where 
  sfqChangeFunc.getName() = "sfq_change" and
  sch_tree_lock.getEnclosingFunction() = sfqChangeFunc and
  sch_tree_lock.getTarget().getName() = "sch_tree_lock" and
  not exists(IfStmt ifstmt |
        ifstmt.getEnclosingFunction() = sfqChangeFunc and
        ifstmt.getLocation().getStartLine() < sch_tree_lock.getLocation().getStartLine() and
        //ifstmt.getCondition().toString().matches("ctl->limit == 1") and
        exists(FunctionCall nl |  
            nl.getTarget().getName() = "NL_SET_ERR_MSG_MOD" and
            nl.getEnclosingBlock() = ifstmt.getThen() and
            nl.getArgument(1).toString().matches("%limit%")
         )
    )
  
select sch_tree_lock, 
  "Potential vulnerability: missing limit=1 validation before sch_tree_lock call" +
  sch_tree_lock + "sch_tree_lock called here without proper limit validation"