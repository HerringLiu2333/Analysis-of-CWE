/**
 * @name CVE-2025-38330
 * @description Detects an out-of-bounds read in the cs_dsp_ctl_cache_init_multiple_offsets KUnit test function.
 *              The code allocates memory based on an initial size of 4 bytes, but later incorrectly
 *              overrides the length variable to 8 bytes. This discrepancy leads to an attempt to read
 *              beyond the allocated buffer boundary when subsequent operations use the larger, incorrect size.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/kernel/oob-read-cs-dsp-ctl-cache
 * @tags security
 *       correctness
 *       external/cwe/cwe-125
 * @patch-commit f4ba2ea57da51d616b689c4b8826c517ff5a8523
 * @source-file drivers/firmware/cirrus/test/cs_dsp_test_control_cache.c
 * @affected-function cs_dsp_ctl_cache_init_multiple_offsets
 * @kernel-config CONFIG_SND_SOC_CIRRUS_TEST_LIB
 * @vulnerability-type out-of-bounds-read
 * @patch-diff |
 *      @@ -776,7 +776,6 @@ static void cs_dsp_ctl_cache_init_multiple_offsets(struct kunit *test)
 *      					      "dummyalg", NULL);
 *      
 *      	/* Create controls identical except for offset *&#47;
 *      -	def.length_bytes = 8;
 *      	def.offset_dsp_words = 0;
 *      	def.shortname = "CtlA";
 *      	cs_dsp_mock_wmfw_add_coeff_desc(local->wmfw_builder, &def);
 * @references https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-38330
 * @remediation
 * @patch-description |
 *     firmware: cs_dsp: Fix OOB memory read access in KUnit test (ctl cache)
 *     KASAN reported out of bounds access - cs_dsp_ctl_cache_init_multiple_offsets().
 *     The code uses mock_coeff_template.length_bytes (4 bytes) for register value
 *     allocations. But later, this length is set to 8 bytes which causes
 *     test code failures.
 *     
 *     As fix, just remove the lenght override, keeping the original value 4
 *     for all operations.
 */

import cpp

from Assignment assign, FieldAccess fieldAccess, Function func
where 
  // 检查函数名为cs_dsp_ctl_cache_init_multiple_offsets
  func.getName() = "cs_dsp_ctl_cache_init_multiple_offsets" and
  
  // 检查赋值语句在该函数中
  assign.getEnclosingFunction() = func and
  
  // 检查赋值的左边是字段访问
  assign.getLValue() = fieldAccess and
  
  // 检查字段名为length_bytes
  fieldAccess.getTarget().getName() = "length_bytes" and
  
  // 检查对象名为def
  fieldAccess.getQualifier().(VariableAccess).getTarget().getName() = "def" and
  
  // 检查赋值的右边是数字8
  assign.getRValue().(Literal).getValue() = "8"

select assign, "在函数 " + func.getName() + " 中发现 def.length_bytes = 8 赋值语句，根据patch应该删除此行"