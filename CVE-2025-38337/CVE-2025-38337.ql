import cpp

/**
 * 检测空指针解引用：在调用is_handle_aborted()之前对handle->h_transaction的解引用
 */
class HandleTransactionNullPointerDereference extends Expr {
  HandleTransactionNullPointerDereference() {
    // 查找handle->h_transaction的解引用操作
    exists(PointerFieldAccess pfa, Function func |
      func.hasName("jbd2_journal_dirty_metadata") and
      pfa.getEnclosingFunction() = func and
      pfa.getTarget().getName() = "t_journal" and
      pfa.getQualifier().(VariableAccess).getTarget().hasName("transaction") and
      this = pfa
    )
  }
}

/**
 * 检测数据竞争：对jh->b_modified字段的未保护并发访问
 */
class UnsafeModifiedFieldAccess extends Expr {
  UnsafeModifiedFieldAccess() {
    // 查找对jh->b_modified == 1的比较操作
    exists(EQExpr eq, FieldAccess fa, Function func |
      func.hasName("jbd2_journal_dirty_metadata") and
      eq.getEnclosingFunction() = func and
      eq.getLeftOperand() = fa and
      fa.getTarget().hasName("b_modified") and
      fa.getQualifier().(VariableAccess).getTarget().hasName("jh") and
      eq.getRightOperand().(Literal).getValue() = "1" and
      this = eq and
      // 检查这个访问是否没有被data_race()包装或适当的锁保护
      not exists(FunctionCall dataRaceCall |
        dataRaceCall.getTarget().hasName("data_race") and
        dataRaceCall.getAnArgument() = eq
      )
    )
  }
}

from HandleTransactionNullPointerDereference nullDeref, UnsafeModifiedFieldAccess raceAccess
select nullDeref, "潜在的空指针解引用:在调用is_handle_aborted()检查之前访问handle->h_transaction,可能导致内核崩溃",
       raceAccess, "数据竞争风险:对jh->b_modified字段的并发访问未使用data_race()注解或适当的锁保护,可能导致内存损坏"