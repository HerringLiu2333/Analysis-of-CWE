import cpp
import semmle.code.cpp.dataflow.DataFlow
import semmle.code.cpp.dataflow.TaintTracking
import semmle.code.cpp.controlflow.Guards

// 定义释放函数类
class DevKfreeSkbFunction extends Function {
  DevKfreeSkbFunction() {
    this.getName() = "dev_kfree_skb_any"
  }
}

from FunctionCall freeCall, PointerFieldAccess fieldAccess, Function f
where
  // 匹配目标函数
  f.getName() = "ath12k_dp_rx_msdu_coalesce" and
  
  // 查找 dev_kfree_skb_any 的调用
  freeCall.getTarget() instanceof DevKfreeSkbFunction and
  
  // 查找 is_continuation 字段的访问
  fieldAccess.getTarget().getName() = "is_continuation" and
  
  // 确保在同一函数内
  freeCall.getEnclosingFunction() = f and
  fieldAccess.getEnclosingFunction() = f and
  
  // 检查字段访问发生在释放之后（控制流分析）
  freeCall.getBasicBlock().getASuccessor*() = fieldAccess.getBasicBlock() and
  
  // 确保访问的结构体指针是通过被释放的 skb 派生的
  exists(Variable skb |
    freeCall.getArgument(0) = skb.getAnAccess() and
    // 通过 ATH12K_SKB_RXCB 宏获取 rxcb
    fieldAccess.getQualifier().toString().matches("%rxcb%")
  )
select freeCall,
       fieldAccess