/**
 * @name CVE-2024-57948
 * @description Detects deletions from IEEE 802.15.4 interface lists (e.g., list_del_rcu on sdata->list)
 * without validating list membership under the proper lock, which can cause list corruption
 * and crashes when interfaces are concurrently removed during device unregister.
 * @kind problem
 * @problem.severity error
 * @precision high
 * @id cpp/unprotected-list-del
 * @tags 
 *  security
 *  correctness
 *  concurrency
 *  race-condition
 *  external/cwe/cwe-362
 *  external/cwe/cwe-667
 * @patch-commit eb09fbeb48709fe66c0d708aed81e910a577a30a
 * @source-file net/mac802154/iface.c
 * @affected-function ieee802154_if_remove
 * @kernel-config N/A
 * @vulnerability-type race-condition
 * @patch-diff |
 *  diff --git a/net/mac802154/iface.c b/net/mac802154/iface.c
 *  index c0e2da5072bea2…9e4631fade90c9 100644
 *  --- a/net/mac802154/iface.c
 *  +++ b/net/mac802154/iface.c
 *  @@ -684,6 +684,10 @@ void ieee802154_if_remove(struct ieee802154_sub_if_data *sdata)
 *    ASSERT_RTNL();
 *
 *    mutex_lock(&sdata->local->iflist_mtx);
 * +  if (list_empty(&sdata->local->interfaces)) {
 * +    mutex_unlock(&sdata->local->iflist_mtx);
 * +    return;
 * +  }
 *    list_del_rcu(&sdata->list);
 *    mutex_unlock(&sdata->local->iflist_mtx)
 *
 * @references https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=eb09fbeb48709fe66c0d708aed81e910a577a30a
 * @remediation Validate list state and membership under the correct lock before performing deletions
 * (e.g., check list_empty or membership) and ensure unregister ordering and RCU grace periods are respected.
 */


import cpp

from Function ifRemove, FunctionCall listDel
where
  ifRemove.getName() = "ieee802154_if_remove" and
  listDel.getEnclosingFunction() = ifRemove and
  listDel.getTarget().getName() = "list_del_rcu" and
  // 检查在同一函数中是否缺少list_empty检查
  not exists(
    FunctionCall check |
    //这里check实际上应是宏展开，没法直接getargument
    check.getEnclosingFunction() = ifRemove and
    check.getTarget().getName() = "list_empty" and
    // 确保检查在删除操作之前（简单的源代码顺序）
    check.getLocation().getStartLine() < listDel.getLocation().getStartLine()
  )
select listDel, "Missing list_empty check before list_del_rcu call in ieee802154_if_remove"
